
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLOGICAL_OP_ORleftLOGICAL_OP_ANDrightLOGICAL_OP_NOTleftLESS_OPLESS_EQUAL_OPGREATER_OPGREATER_EQUAL_OPEQUAL_OPDIFFERENT_OPleftPLUS_OPMINUS_OPleftMUL_OPDIV_OPnonassocLPARENRPARENASSIGNMENT_OP BREAK COMMENT CONDITIONAL1 CONDITIONAL2 DIFFERENT_OP DIV_OP END_LINE EQUAL_OP FALSE FUNCTION_DECLARATION GREATER_EQUAL_OP GREATER_OP LESS_EQUAL_OP LESS_OP LOGICAL_OP_AND LOGICAL_OP_NOT LOGICAL_OP_OR LOOP1 LOOP2 LPAREN MINUS_OP MUL_OP NULL NUMBER_FLOAT NUMBER_INTEGER PLUS_OP RETURN RPAREN SEPARATION STRUCTURE_BODY TEXT_CHAR TEXT_STRING TRUE TYPE_BOOLEAN TYPE_CHAR TYPE_FLOAT TYPE_INTEGER TYPE_STRING VARIABLEprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : expression END_LINE\n                 | assignment END_LINE\n                 | declaration END_LINE\n                 | conditional END_LINE\n                 | loop END_LINE\n                 | return_statement END_LINE\n                 | break_statement END_LINE\n                 | comment\n                 expression : binary_expression\n                  | unitary_expression\n                  | primary_expression\n                  binary_expression : expression PLUS_OP expression\n                         | expression MINUS_OP expression\n                         | expression MUL_OP expression\n                         | expression DIV_OP expression\n                         | expression LESS_OP expression\n                         | expression GREATER_OP expression\n                         | expression LESS_EQUAL_OP expression\n                         | expression GREATER_EQUAL_OP expression\n                         | expression EQUAL_OP expression\n                         | expression DIFFERENT_OP expression\n                         | expression LOGICAL_OP_AND expression\n                         | expression LOGICAL_OP_OR expressionunitary_expression : MINUS_OP expression\n                          | LOGICAL_OP_NOT expressionprimary_expression : LPAREN expression RPAREN\n                            | termterm : NUMBER_INTEGER\n            | NUMBER_FLOAT\n            | VARIABLE\n            | TRUE\n            | FALSE\n            | NULL\n            | TEXT_STRING\n            | TEXT_CHARassignment : VARIABLE ASSIGNMENT_OP expressiondeclaration : TYPE_BOOLEAN VARIABLE \n                   | TYPE_STRING VARIABLE\n                   | TYPE_CHAR VARIABLE\n                   | TYPE_INTEGER VARIABLE\n                   | TYPE_FLOAT VARIABLE\n                   | TYPE_BOOLEAN assignment\n                   | TYPE_STRING assignment\n                   | TYPE_CHAR assignment\n                   | TYPE_INTEGER assignment\n                   | TYPE_FLOAT assignmentconditional : CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list \n                   | CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_listloop : LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list \n            | LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_listreturn_statement : RETURN expression\n                        | RETURNbreak_statement : BREAKcomment : COMMENT'
    
_lr_action_items = {'VARIABLE':([0,2,3,11,16,17,18,19,20,22,25,27,28,29,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,69,72,73,97,98,99,101,102,103,106,108,109,110,],[15,15,-3,-11,59,61,63,65,67,71,71,-57,71,71,-2,-4,71,71,71,71,71,71,71,71,71,71,71,71,-5,-6,-7,-8,-9,-10,71,71,71,94,71,15,15,15,15,94,15,15,15,15,]),'TYPE_BOOLEAN':([0,2,3,11,27,38,39,52,53,54,55,56,57,98,99,101,102,106,108,109,110,],[16,16,-3,-11,-57,-2,-4,-5,-6,-7,-8,-9,-10,16,16,16,16,16,16,16,16,]),'TYPE_STRING':([0,2,3,11,27,38,39,52,53,54,55,56,57,98,99,101,102,106,108,109,110,],[17,17,-3,-11,-57,-2,-4,-5,-6,-7,-8,-9,-10,17,17,17,17,17,17,17,17,]),'TYPE_CHAR':([0,2,3,11,27,38,39,52,53,54,55,56,57,98,99,101,102,106,108,109,110,],[18,18,-3,-11,-57,-2,-4,-5,-6,-7,-8,-9,-10,18,18,18,18,18,18,18,18,]),'TYPE_INTEGER':([0,2,3,11,27,38,39,52,53,54,55,56,57,98,99,101,102,106,108,109,110,],[19,19,-3,-11,-57,-2,-4,-5,-6,-7,-8,-9,-10,19,19,19,19,19,19,19,19,]),'TYPE_FLOAT':([0,2,3,11,27,38,39,52,53,54,55,56,57,98,99,101,102,106,108,109,110,],[20,20,-3,-11,-57,-2,-4,-5,-6,-7,-8,-9,-10,20,20,20,20,20,20,20,20,]),'CONDITIONAL1':([0,2,3,11,27,38,39,52,53,54,55,56,57,98,99,101,102,106,108,109,110,],[21,21,-3,-11,-57,-2,-4,-5,-6,-7,-8,-9,-10,21,21,21,21,21,21,21,21,]),'LOOP1':([0,2,3,11,27,38,39,52,53,54,55,56,57,98,99,101,102,106,108,109,110,],[23,23,-3,-11,-57,-2,-4,-5,-6,-7,-8,-9,-10,23,23,23,23,23,23,23,23,]),'LOOP2':([0,2,3,11,27,38,39,52,53,54,55,56,57,98,99,101,102,106,108,109,110,],[24,24,-3,-11,-57,-2,-4,-5,-6,-7,-8,-9,-10,24,24,24,24,24,24,24,24,]),'RETURN':([0,2,3,11,27,38,39,52,53,54,55,56,57,98,99,101,102,106,108,109,110,],[25,25,-3,-11,-57,-2,-4,-5,-6,-7,-8,-9,-10,25,25,25,25,25,25,25,25,]),'BREAK':([0,2,3,11,27,38,39,52,53,54,55,56,57,98,99,101,102,106,108,109,110,],[26,26,-3,-11,-57,-2,-4,-5,-6,-7,-8,-9,-10,26,26,26,26,26,26,26,26,]),'COMMENT':([0,2,3,11,27,38,39,52,53,54,55,56,57,98,99,101,102,106,108,109,110,],[27,27,-3,-11,-57,-2,-4,-5,-6,-7,-8,-9,-10,27,27,27,27,27,27,27,27,]),'MINUS_OP':([0,2,3,4,11,12,13,14,15,22,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,97,98,99,100,101,102,106,108,109,110,],[28,28,-3,41,-11,-12,-13,-14,-33,28,28,-57,28,28,-30,-31,-32,-34,-35,-36,-37,-38,-2,-4,28,28,28,28,28,28,28,28,28,28,28,28,-5,-6,-7,-8,-9,-10,28,28,41,-33,28,41,-27,41,-15,-16,-17,-18,41,41,41,41,41,41,41,41,41,41,-29,41,28,28,28,41,28,28,28,28,28,28,]),'LOGICAL_OP_NOT':([0,2,3,11,22,25,27,28,29,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,69,72,97,98,99,101,102,106,108,109,110,],[29,29,-3,-11,29,29,-57,29,29,-2,-4,29,29,29,29,29,29,29,29,29,29,29,29,-5,-6,-7,-8,-9,-10,29,29,29,29,29,29,29,29,29,29,29,29,]),'LPAREN':([0,2,3,11,21,22,23,24,25,27,28,29,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,69,72,97,98,99,101,102,106,108,109,110,],[22,22,-3,-11,69,22,72,73,22,-57,22,22,-2,-4,22,22,22,22,22,22,22,22,22,22,22,22,-5,-6,-7,-8,-9,-10,22,22,22,22,22,22,22,22,22,22,22,22,]),'NUMBER_INTEGER':([0,2,3,11,22,25,27,28,29,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,69,72,97,98,99,101,102,106,108,109,110,],[31,31,-3,-11,31,31,-57,31,31,-2,-4,31,31,31,31,31,31,31,31,31,31,31,31,-5,-6,-7,-8,-9,-10,31,31,31,31,31,31,31,31,31,31,31,31,]),'NUMBER_FLOAT':([0,2,3,11,22,25,27,28,29,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,69,72,97,98,99,101,102,106,108,109,110,],[32,32,-3,-11,32,32,-57,32,32,-2,-4,32,32,32,32,32,32,32,32,32,32,32,32,-5,-6,-7,-8,-9,-10,32,32,32,32,32,32,32,32,32,32,32,32,]),'TRUE':([0,2,3,11,22,25,27,28,29,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,69,72,97,98,99,101,102,106,108,109,110,],[33,33,-3,-11,33,33,-57,33,33,-2,-4,33,33,33,33,33,33,33,33,33,33,33,33,-5,-6,-7,-8,-9,-10,33,33,33,33,33,33,33,33,33,33,33,33,]),'FALSE':([0,2,3,11,22,25,27,28,29,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,69,72,97,98,99,101,102,106,108,109,110,],[34,34,-3,-11,34,34,-57,34,34,-2,-4,34,34,34,34,34,34,34,34,34,34,34,34,-5,-6,-7,-8,-9,-10,34,34,34,34,34,34,34,34,34,34,34,34,]),'NULL':([0,2,3,11,22,25,27,28,29,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,69,72,97,98,99,101,102,106,108,109,110,],[35,35,-3,-11,35,35,-57,35,35,-2,-4,35,35,35,35,35,35,35,35,35,35,35,35,-5,-6,-7,-8,-9,-10,35,35,35,35,35,35,35,35,35,35,35,35,]),'TEXT_STRING':([0,2,3,11,22,25,27,28,29,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,69,72,97,98,99,101,102,106,108,109,110,],[36,36,-3,-11,36,36,-57,36,36,-2,-4,36,36,36,36,36,36,36,36,36,36,36,36,-5,-6,-7,-8,-9,-10,36,36,36,36,36,36,36,36,36,36,36,36,]),'TEXT_CHAR':([0,2,3,11,22,25,27,28,29,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,69,72,97,98,99,101,102,106,108,109,110,],[37,37,-3,-11,37,37,-57,37,37,-2,-4,37,37,37,37,37,37,37,37,37,37,37,37,-5,-6,-7,-8,-9,-10,37,37,37,37,37,37,37,37,37,37,37,37,]),'$end':([1,2,3,11,27,38,39,52,53,54,55,56,57,],[0,-1,-3,-11,-57,-2,-4,-5,-6,-7,-8,-9,-10,]),'CONDITIONAL2':([3,11,27,38,39,52,53,54,55,56,57,101,],[-3,-11,-57,-2,-4,-5,-6,-7,-8,-9,-10,104,]),'END_LINE':([3,4,5,6,7,8,9,10,11,12,13,14,15,25,26,27,30,31,32,33,34,35,36,37,38,39,52,53,54,55,56,57,59,60,61,62,63,64,65,66,67,68,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,101,102,108,110,],[-3,39,52,53,54,55,56,57,-11,-12,-13,-14,-33,-55,-56,-57,-30,-31,-32,-34,-35,-36,-37,-38,-2,-4,-5,-6,-7,-8,-9,-10,-40,-45,-41,-46,-42,-47,-43,-48,-44,-49,-33,-54,-27,-28,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-39,-29,-50,-52,-51,-53,]),'PLUS_OP':([4,12,13,14,15,30,31,32,33,34,35,36,37,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,100,],[40,-12,-13,-14,-33,-30,-31,-32,-34,-35,-36,-37,-38,40,-33,40,-27,40,-15,-16,-17,-18,40,40,40,40,40,40,40,40,40,40,-29,40,40,]),'MUL_OP':([4,12,13,14,15,30,31,32,33,34,35,36,37,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,100,],[42,-12,-13,-14,-33,-30,-31,-32,-34,-35,-36,-37,-38,42,-33,42,42,42,42,42,-17,-18,42,42,42,42,42,42,42,42,42,42,-29,42,42,]),'DIV_OP':([4,12,13,14,15,30,31,32,33,34,35,36,37,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,100,],[43,-12,-13,-14,-33,-30,-31,-32,-34,-35,-36,-37,-38,43,-33,43,43,43,43,43,-17,-18,43,43,43,43,43,43,43,43,43,43,-29,43,43,]),'LESS_OP':([4,12,13,14,15,30,31,32,33,34,35,36,37,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,100,],[44,-12,-13,-14,-33,-30,-31,-32,-34,-35,-36,-37,-38,44,-33,44,-27,44,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,44,44,44,44,-29,44,44,]),'GREATER_OP':([4,12,13,14,15,30,31,32,33,34,35,36,37,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,100,],[45,-12,-13,-14,-33,-30,-31,-32,-34,-35,-36,-37,-38,45,-33,45,-27,45,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,45,45,45,45,-29,45,45,]),'LESS_EQUAL_OP':([4,12,13,14,15,30,31,32,33,34,35,36,37,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,100,],[46,-12,-13,-14,-33,-30,-31,-32,-34,-35,-36,-37,-38,46,-33,46,-27,46,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,46,46,46,46,-29,46,46,]),'GREATER_EQUAL_OP':([4,12,13,14,15,30,31,32,33,34,35,36,37,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,100,],[47,-12,-13,-14,-33,-30,-31,-32,-34,-35,-36,-37,-38,47,-33,47,-27,47,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,47,47,47,47,-29,47,47,]),'EQUAL_OP':([4,12,13,14,15,30,31,32,33,34,35,36,37,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,100,],[48,-12,-13,-14,-33,-30,-31,-32,-34,-35,-36,-37,-38,48,-33,48,-27,48,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,48,48,48,48,-29,48,48,]),'DIFFERENT_OP':([4,12,13,14,15,30,31,32,33,34,35,36,37,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,100,],[49,-12,-13,-14,-33,-30,-31,-32,-34,-35,-36,-37,-38,49,-33,49,-27,49,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,49,49,49,49,-29,49,49,]),'LOGICAL_OP_AND':([4,12,13,14,15,30,31,32,33,34,35,36,37,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,100,],[50,-12,-13,-14,-33,-30,-31,-32,-34,-35,-36,-37,-38,50,-33,50,-27,-28,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,50,50,50,-29,50,50,]),'LOGICAL_OP_OR':([4,12,13,14,15,30,31,32,33,34,35,36,37,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,100,],[51,-12,-13,-14,-33,-30,-31,-32,-34,-35,-36,-37,-38,51,-33,51,-27,-28,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,51,51,-29,51,51,]),'RPAREN':([12,13,14,30,31,32,33,34,35,36,37,70,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,105,],[-12,-13,-14,-30,-31,-32,-34,-35,-36,-37,-38,91,-33,-27,-28,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-39,95,-29,96,107,]),'SEPARATION':([12,13,14,30,31,32,33,34,35,36,37,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,93,100,],[-12,-13,-14,-30,-31,-32,-34,-35,-36,-37,-38,-33,-27,-28,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-39,-29,97,103,]),'ASSIGNMENT_OP':([15,59,61,63,65,67,94,],[58,58,58,58,58,58,58,]),'STRUCTURE_BODY':([95,96,104,107,],[98,99,106,109,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,98,99,106,109,],[2,101,102,108,110,]),'statement':([0,2,98,99,101,102,106,108,109,110,],[3,38,3,3,38,38,3,38,3,38,]),'expression':([0,2,22,25,28,29,40,41,42,43,44,45,46,47,48,49,50,51,58,69,72,97,98,99,101,102,106,108,109,110,],[4,4,70,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,100,4,4,4,4,4,4,4,4,]),'assignment':([0,2,16,17,18,19,20,73,98,99,101,102,103,106,108,109,110,],[5,5,60,62,64,66,68,93,5,5,5,5,105,5,5,5,5,]),'declaration':([0,2,98,99,101,102,106,108,109,110,],[6,6,6,6,6,6,6,6,6,6,]),'conditional':([0,2,98,99,101,102,106,108,109,110,],[7,7,7,7,7,7,7,7,7,7,]),'loop':([0,2,98,99,101,102,106,108,109,110,],[8,8,8,8,8,8,8,8,8,8,]),'return_statement':([0,2,98,99,101,102,106,108,109,110,],[9,9,9,9,9,9,9,9,9,9,]),'break_statement':([0,2,98,99,101,102,106,108,109,110,],[10,10,10,10,10,10,10,10,10,10,]),'comment':([0,2,98,99,101,102,106,108,109,110,],[11,11,11,11,11,11,11,11,11,11,]),'binary_expression':([0,2,22,25,28,29,40,41,42,43,44,45,46,47,48,49,50,51,58,69,72,97,98,99,101,102,106,108,109,110,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'unitary_expression':([0,2,22,25,28,29,40,41,42,43,44,45,46,47,48,49,50,51,58,69,72,97,98,99,101,102,106,108,109,110,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'primary_expression':([0,2,22,25,28,29,40,41,42,43,44,45,46,47,48,49,50,51,58,69,72,97,98,99,101,102,106,108,109,110,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'term':([0,2,22,25,28,29,40,41,42,43,44,45,46,47,48,49,50,51,58,69,72,97,98,99,101,102,106,108,109,110,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',24),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',25),
  ('statement -> expression END_LINE','statement',2,'p_statement','parser.py',32),
  ('statement -> assignment END_LINE','statement',2,'p_statement','parser.py',33),
  ('statement -> declaration END_LINE','statement',2,'p_statement','parser.py',34),
  ('statement -> conditional END_LINE','statement',2,'p_statement','parser.py',35),
  ('statement -> loop END_LINE','statement',2,'p_statement','parser.py',36),
  ('statement -> return_statement END_LINE','statement',2,'p_statement','parser.py',37),
  ('statement -> break_statement END_LINE','statement',2,'p_statement','parser.py',38),
  ('statement -> comment','statement',1,'p_statement','parser.py',39),
  ('expression -> binary_expression','expression',1,'p_expression','parser.py',44),
  ('expression -> unitary_expression','expression',1,'p_expression','parser.py',45),
  ('expression -> primary_expression','expression',1,'p_expression','parser.py',46),
  ('binary_expression -> expression PLUS_OP expression','binary_expression',3,'p_binary_expression','parser.py',51),
  ('binary_expression -> expression MINUS_OP expression','binary_expression',3,'p_binary_expression','parser.py',52),
  ('binary_expression -> expression MUL_OP expression','binary_expression',3,'p_binary_expression','parser.py',53),
  ('binary_expression -> expression DIV_OP expression','binary_expression',3,'p_binary_expression','parser.py',54),
  ('binary_expression -> expression LESS_OP expression','binary_expression',3,'p_binary_expression','parser.py',55),
  ('binary_expression -> expression GREATER_OP expression','binary_expression',3,'p_binary_expression','parser.py',56),
  ('binary_expression -> expression LESS_EQUAL_OP expression','binary_expression',3,'p_binary_expression','parser.py',57),
  ('binary_expression -> expression GREATER_EQUAL_OP expression','binary_expression',3,'p_binary_expression','parser.py',58),
  ('binary_expression -> expression EQUAL_OP expression','binary_expression',3,'p_binary_expression','parser.py',59),
  ('binary_expression -> expression DIFFERENT_OP expression','binary_expression',3,'p_binary_expression','parser.py',60),
  ('binary_expression -> expression LOGICAL_OP_AND expression','binary_expression',3,'p_binary_expression','parser.py',61),
  ('binary_expression -> expression LOGICAL_OP_OR expression','binary_expression',3,'p_binary_expression','parser.py',62),
  ('unitary_expression -> MINUS_OP expression','unitary_expression',2,'p_unitary_expression','parser.py',93),
  ('unitary_expression -> LOGICAL_OP_NOT expression','unitary_expression',2,'p_unitary_expression','parser.py',94),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',102),
  ('primary_expression -> term','primary_expression',1,'p_primary_expression','parser.py',103),
  ('term -> NUMBER_INTEGER','term',1,'p_term','parser.py',110),
  ('term -> NUMBER_FLOAT','term',1,'p_term','parser.py',111),
  ('term -> VARIABLE','term',1,'p_term','parser.py',112),
  ('term -> TRUE','term',1,'p_term','parser.py',113),
  ('term -> FALSE','term',1,'p_term','parser.py',114),
  ('term -> NULL','term',1,'p_term','parser.py',115),
  ('term -> TEXT_STRING','term',1,'p_term','parser.py',116),
  ('term -> TEXT_CHAR','term',1,'p_term','parser.py',117),
  ('assignment -> VARIABLE ASSIGNMENT_OP expression','assignment',3,'p_assignment','parser.py',132),
  ('declaration -> TYPE_BOOLEAN VARIABLE','declaration',2,'p_declaration','parser.py',137),
  ('declaration -> TYPE_STRING VARIABLE','declaration',2,'p_declaration','parser.py',138),
  ('declaration -> TYPE_CHAR VARIABLE','declaration',2,'p_declaration','parser.py',139),
  ('declaration -> TYPE_INTEGER VARIABLE','declaration',2,'p_declaration','parser.py',140),
  ('declaration -> TYPE_FLOAT VARIABLE','declaration',2,'p_declaration','parser.py',141),
  ('declaration -> TYPE_BOOLEAN assignment','declaration',2,'p_declaration','parser.py',142),
  ('declaration -> TYPE_STRING assignment','declaration',2,'p_declaration','parser.py',143),
  ('declaration -> TYPE_CHAR assignment','declaration',2,'p_declaration','parser.py',144),
  ('declaration -> TYPE_INTEGER assignment','declaration',2,'p_declaration','parser.py',145),
  ('declaration -> TYPE_FLOAT assignment','declaration',2,'p_declaration','parser.py',146),
  ('conditional -> CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list','conditional',6,'p_conditional','parser.py',155),
  ('conditional -> CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list','conditional',9,'p_conditional','parser.py',156),
  ('loop -> LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list','loop',6,'p_loop','parser.py',172),
  ('loop -> LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list','loop',10,'p_loop','parser.py',173),
  ('return_statement -> RETURN expression','return_statement',2,'p_return_statement','parser.py',190),
  ('return_statement -> RETURN','return_statement',1,'p_return_statement','parser.py',191),
  ('break_statement -> BREAK','break_statement',1,'p_break_statement','parser.py',198),
  ('comment -> COMMENT','comment',1,'p_comment','parser.py',202),
]
