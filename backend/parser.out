Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CONDITIONAL1
    CONDITIONAL2
    FUNCTION_DECLARATION
    LOOP
    RETURN
    SEPARATION
    STRUCTURE_BODY
    UNTIL

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> expression END_LINE
Rule 5     statement -> assignment END_LINE
Rule 6     statement -> declaration END_LINE
Rule 7     statement -> print_statement END_LINE
Rule 8     statement -> comment
Rule 9     statement -> error
Rule 10    assignment -> VARIABLE ASSIGNMENT_OP expression
Rule 11    declaration -> type VARIABLE ASSIGNMENT_OP expression
Rule 12    declaration -> type VARIABLE
Rule 13    expression -> binary_expression
Rule 14    expression -> unitary_expression
Rule 15    expression -> primary_expression
Rule 16    binary_expression -> expression PLUS_OP expression
Rule 17    binary_expression -> expression MINUS_OP expression
Rule 18    binary_expression -> expression MUL_OP expression
Rule 19    binary_expression -> expression DIV_OP expression
Rule 20    binary_expression -> expression LESS_OP expression
Rule 21    binary_expression -> expression GREATER_OP expression
Rule 22    binary_expression -> expression LESS_EQUAL_OP expression
Rule 23    binary_expression -> expression GREATER_EQUAL_OP expression
Rule 24    binary_expression -> expression EQUAL_OP expression
Rule 25    binary_expression -> expression DIFFERENT_OP expression
Rule 26    binary_expression -> expression LOGICAL_OP_AND expression
Rule 27    binary_expression -> expression LOGICAL_OP_OR expression
Rule 28    unitary_expression -> MINUS_OP expression
Rule 29    unitary_expression -> LOGICAL_OP_NOT expression
Rule 30    primary_expression -> VARIABLE
Rule 31    primary_expression -> NUMBER_INTEGER
Rule 32    primary_expression -> NUMBER_FLOAT
Rule 33    primary_expression -> TRUE
Rule 34    primary_expression -> FALSE
Rule 35    primary_expression -> NULL
Rule 36    primary_expression -> TEXT_CHAR
Rule 37    primary_expression -> TEXT_STRING
Rule 38    print_statement -> PRINT_DECLARATION LPAREN expression RPAREN
Rule 39    comment -> COMMENT
Rule 40    empty -> <empty>
Rule 41    type -> TYPE_INTEGER
Rule 42    type -> TYPE_FLOAT
Rule 43    type -> TYPE_BOOLEAN
Rule 44    type -> TYPE_CHAR
Rule 45    type -> TYPE_STRING

Terminals, with rules where they appear

ASSIGNMENT_OP        : 10 11
BREAK                : 
COMMENT              : 39
CONDITIONAL1         : 
CONDITIONAL2         : 
DIFFERENT_OP         : 25
DIV_OP               : 19
END_LINE             : 4 5 6 7
EQUAL_OP             : 24
FALSE                : 34
FUNCTION_DECLARATION : 
GREATER_EQUAL_OP     : 23
GREATER_OP           : 21
LESS_EQUAL_OP        : 22
LESS_OP              : 20
LOGICAL_OP_AND       : 26
LOGICAL_OP_NOT       : 29
LOGICAL_OP_OR        : 27
LOOP                 : 
LPAREN               : 38
MINUS_OP             : 17 28
MUL_OP               : 18
NULL                 : 35
NUMBER_FLOAT         : 32
NUMBER_INTEGER       : 31
PLUS_OP              : 16
PRINT_DECLARATION    : 38
RETURN               : 
RPAREN               : 38
SEPARATION           : 
STRUCTURE_BODY       : 
TEXT_CHAR            : 36
TEXT_STRING          : 37
TRUE                 : 33
TYPE_BOOLEAN         : 43
TYPE_CHAR            : 44
TYPE_FLOAT           : 42
TYPE_INTEGER         : 41
TYPE_STRING          : 45
UNTIL                : 
VARIABLE             : 10 11 12 30
error                : 9

Nonterminals, with rules where they appear

assignment           : 5
binary_expression    : 13
comment              : 8
declaration          : 6
empty                : 
expression           : 4 10 11 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 29 38
primary_expression   : 15
print_statement      : 7
program              : 0
statement            : 2 3
statement_list       : 1 2
type                 : 11 12
unitary_expression   : 14

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . print_statement END_LINE
    (8) statement -> . comment
    (9) statement -> . error
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (10) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (11) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (12) declaration -> . type VARIABLE
    (38) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (39) comment -> . COMMENT
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING
    (41) type -> . TYPE_INTEGER
    (42) type -> . TYPE_FLOAT
    (43) type -> . TYPE_BOOLEAN
    (44) type -> . TYPE_CHAR
    (45) type -> . TYPE_STRING

    error           shift and go to state 9
    VARIABLE        shift and go to state 13
    PRINT_DECLARATION shift and go to state 15
    COMMENT         shift and go to state 16
    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25
    TYPE_INTEGER    shift and go to state 26
    TYPE_FLOAT      shift and go to state 27
    TYPE_BOOLEAN    shift and go to state 28
    TYPE_CHAR       shift and go to state 29
    TYPE_STRING     shift and go to state 30

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    assignment                     shift and go to state 5
    declaration                    shift and go to state 6
    print_statement                shift and go to state 7
    comment                        shift and go to state 8
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12
    type                           shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . print_statement END_LINE
    (8) statement -> . comment
    (9) statement -> . error
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (10) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (11) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (12) declaration -> . type VARIABLE
    (38) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (39) comment -> . COMMENT
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING
    (41) type -> . TYPE_INTEGER
    (42) type -> . TYPE_FLOAT
    (43) type -> . TYPE_BOOLEAN
    (44) type -> . TYPE_CHAR
    (45) type -> . TYPE_STRING

    $end            reduce using rule 1 (program -> statement_list .)
    error           shift and go to state 9
    VARIABLE        shift and go to state 13
    PRINT_DECLARATION shift and go to state 15
    COMMENT         shift and go to state 16
    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25
    TYPE_INTEGER    shift and go to state 26
    TYPE_FLOAT      shift and go to state 27
    TYPE_BOOLEAN    shift and go to state 28
    TYPE_CHAR       shift and go to state 29
    TYPE_STRING     shift and go to state 30

    statement                      shift and go to state 31
    expression                     shift and go to state 4
    assignment                     shift and go to state 5
    declaration                    shift and go to state 6
    print_statement                shift and go to state 7
    comment                        shift and go to state 8
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12
    type                           shift and go to state 14

state 3

    (3) statement_list -> statement .

    error           reduce using rule 3 (statement_list -> statement .)
    VARIABLE        reduce using rule 3 (statement_list -> statement .)
    PRINT_DECLARATION reduce using rule 3 (statement_list -> statement .)
    COMMENT         reduce using rule 3 (statement_list -> statement .)
    MINUS_OP        reduce using rule 3 (statement_list -> statement .)
    LOGICAL_OP_NOT  reduce using rule 3 (statement_list -> statement .)
    NUMBER_INTEGER  reduce using rule 3 (statement_list -> statement .)
    NUMBER_FLOAT    reduce using rule 3 (statement_list -> statement .)
    TRUE            reduce using rule 3 (statement_list -> statement .)
    FALSE           reduce using rule 3 (statement_list -> statement .)
    NULL            reduce using rule 3 (statement_list -> statement .)
    TEXT_CHAR       reduce using rule 3 (statement_list -> statement .)
    TEXT_STRING     reduce using rule 3 (statement_list -> statement .)
    TYPE_INTEGER    reduce using rule 3 (statement_list -> statement .)
    TYPE_FLOAT      reduce using rule 3 (statement_list -> statement .)
    TYPE_BOOLEAN    reduce using rule 3 (statement_list -> statement .)
    TYPE_CHAR       reduce using rule 3 (statement_list -> statement .)
    TYPE_STRING     reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> expression . END_LINE
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        shift and go to state 32
    PLUS_OP         shift and go to state 33
    MINUS_OP        shift and go to state 34
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36
    LESS_OP         shift and go to state 37
    GREATER_OP      shift and go to state 38
    LESS_EQUAL_OP   shift and go to state 39
    GREATER_EQUAL_OP shift and go to state 40
    EQUAL_OP        shift and go to state 41
    DIFFERENT_OP    shift and go to state 42
    LOGICAL_OP_AND  shift and go to state 43
    LOGICAL_OP_OR   shift and go to state 44


state 5

    (5) statement -> assignment . END_LINE

    END_LINE        shift and go to state 45


state 6

    (6) statement -> declaration . END_LINE

    END_LINE        shift and go to state 46


state 7

    (7) statement -> print_statement . END_LINE

    END_LINE        shift and go to state 47


state 8

    (8) statement -> comment .

    error           reduce using rule 8 (statement -> comment .)
    VARIABLE        reduce using rule 8 (statement -> comment .)
    PRINT_DECLARATION reduce using rule 8 (statement -> comment .)
    COMMENT         reduce using rule 8 (statement -> comment .)
    MINUS_OP        reduce using rule 8 (statement -> comment .)
    LOGICAL_OP_NOT  reduce using rule 8 (statement -> comment .)
    NUMBER_INTEGER  reduce using rule 8 (statement -> comment .)
    NUMBER_FLOAT    reduce using rule 8 (statement -> comment .)
    TRUE            reduce using rule 8 (statement -> comment .)
    FALSE           reduce using rule 8 (statement -> comment .)
    NULL            reduce using rule 8 (statement -> comment .)
    TEXT_CHAR       reduce using rule 8 (statement -> comment .)
    TEXT_STRING     reduce using rule 8 (statement -> comment .)
    TYPE_INTEGER    reduce using rule 8 (statement -> comment .)
    TYPE_FLOAT      reduce using rule 8 (statement -> comment .)
    TYPE_BOOLEAN    reduce using rule 8 (statement -> comment .)
    TYPE_CHAR       reduce using rule 8 (statement -> comment .)
    TYPE_STRING     reduce using rule 8 (statement -> comment .)
    $end            reduce using rule 8 (statement -> comment .)


state 9

    (9) statement -> error .

    error           reduce using rule 9 (statement -> error .)
    VARIABLE        reduce using rule 9 (statement -> error .)
    PRINT_DECLARATION reduce using rule 9 (statement -> error .)
    COMMENT         reduce using rule 9 (statement -> error .)
    MINUS_OP        reduce using rule 9 (statement -> error .)
    LOGICAL_OP_NOT  reduce using rule 9 (statement -> error .)
    NUMBER_INTEGER  reduce using rule 9 (statement -> error .)
    NUMBER_FLOAT    reduce using rule 9 (statement -> error .)
    TRUE            reduce using rule 9 (statement -> error .)
    FALSE           reduce using rule 9 (statement -> error .)
    NULL            reduce using rule 9 (statement -> error .)
    TEXT_CHAR       reduce using rule 9 (statement -> error .)
    TEXT_STRING     reduce using rule 9 (statement -> error .)
    TYPE_INTEGER    reduce using rule 9 (statement -> error .)
    TYPE_FLOAT      reduce using rule 9 (statement -> error .)
    TYPE_BOOLEAN    reduce using rule 9 (statement -> error .)
    TYPE_CHAR       reduce using rule 9 (statement -> error .)
    TYPE_STRING     reduce using rule 9 (statement -> error .)
    $end            reduce using rule 9 (statement -> error .)


state 10

    (13) expression -> binary_expression .

    END_LINE        reduce using rule 13 (expression -> binary_expression .)
    PLUS_OP         reduce using rule 13 (expression -> binary_expression .)
    MINUS_OP        reduce using rule 13 (expression -> binary_expression .)
    MUL_OP          reduce using rule 13 (expression -> binary_expression .)
    DIV_OP          reduce using rule 13 (expression -> binary_expression .)
    LESS_OP         reduce using rule 13 (expression -> binary_expression .)
    GREATER_OP      reduce using rule 13 (expression -> binary_expression .)
    LESS_EQUAL_OP   reduce using rule 13 (expression -> binary_expression .)
    GREATER_EQUAL_OP reduce using rule 13 (expression -> binary_expression .)
    EQUAL_OP        reduce using rule 13 (expression -> binary_expression .)
    DIFFERENT_OP    reduce using rule 13 (expression -> binary_expression .)
    LOGICAL_OP_AND  reduce using rule 13 (expression -> binary_expression .)
    LOGICAL_OP_OR   reduce using rule 13 (expression -> binary_expression .)
    RPAREN          reduce using rule 13 (expression -> binary_expression .)


state 11

    (14) expression -> unitary_expression .

    END_LINE        reduce using rule 14 (expression -> unitary_expression .)
    PLUS_OP         reduce using rule 14 (expression -> unitary_expression .)
    MINUS_OP        reduce using rule 14 (expression -> unitary_expression .)
    MUL_OP          reduce using rule 14 (expression -> unitary_expression .)
    DIV_OP          reduce using rule 14 (expression -> unitary_expression .)
    LESS_OP         reduce using rule 14 (expression -> unitary_expression .)
    GREATER_OP      reduce using rule 14 (expression -> unitary_expression .)
    LESS_EQUAL_OP   reduce using rule 14 (expression -> unitary_expression .)
    GREATER_EQUAL_OP reduce using rule 14 (expression -> unitary_expression .)
    EQUAL_OP        reduce using rule 14 (expression -> unitary_expression .)
    DIFFERENT_OP    reduce using rule 14 (expression -> unitary_expression .)
    LOGICAL_OP_AND  reduce using rule 14 (expression -> unitary_expression .)
    LOGICAL_OP_OR   reduce using rule 14 (expression -> unitary_expression .)
    RPAREN          reduce using rule 14 (expression -> unitary_expression .)


state 12

    (15) expression -> primary_expression .

    END_LINE        reduce using rule 15 (expression -> primary_expression .)
    PLUS_OP         reduce using rule 15 (expression -> primary_expression .)
    MINUS_OP        reduce using rule 15 (expression -> primary_expression .)
    MUL_OP          reduce using rule 15 (expression -> primary_expression .)
    DIV_OP          reduce using rule 15 (expression -> primary_expression .)
    LESS_OP         reduce using rule 15 (expression -> primary_expression .)
    GREATER_OP      reduce using rule 15 (expression -> primary_expression .)
    LESS_EQUAL_OP   reduce using rule 15 (expression -> primary_expression .)
    GREATER_EQUAL_OP reduce using rule 15 (expression -> primary_expression .)
    EQUAL_OP        reduce using rule 15 (expression -> primary_expression .)
    DIFFERENT_OP    reduce using rule 15 (expression -> primary_expression .)
    LOGICAL_OP_AND  reduce using rule 15 (expression -> primary_expression .)
    LOGICAL_OP_OR   reduce using rule 15 (expression -> primary_expression .)
    RPAREN          reduce using rule 15 (expression -> primary_expression .)


state 13

    (10) assignment -> VARIABLE . ASSIGNMENT_OP expression
    (30) primary_expression -> VARIABLE .

    ASSIGNMENT_OP   shift and go to state 48
    END_LINE        reduce using rule 30 (primary_expression -> VARIABLE .)
    PLUS_OP         reduce using rule 30 (primary_expression -> VARIABLE .)
    MINUS_OP        reduce using rule 30 (primary_expression -> VARIABLE .)
    MUL_OP          reduce using rule 30 (primary_expression -> VARIABLE .)
    DIV_OP          reduce using rule 30 (primary_expression -> VARIABLE .)
    LESS_OP         reduce using rule 30 (primary_expression -> VARIABLE .)
    GREATER_OP      reduce using rule 30 (primary_expression -> VARIABLE .)
    LESS_EQUAL_OP   reduce using rule 30 (primary_expression -> VARIABLE .)
    GREATER_EQUAL_OP reduce using rule 30 (primary_expression -> VARIABLE .)
    EQUAL_OP        reduce using rule 30 (primary_expression -> VARIABLE .)
    DIFFERENT_OP    reduce using rule 30 (primary_expression -> VARIABLE .)
    LOGICAL_OP_AND  reduce using rule 30 (primary_expression -> VARIABLE .)
    LOGICAL_OP_OR   reduce using rule 30 (primary_expression -> VARIABLE .)


state 14

    (11) declaration -> type . VARIABLE ASSIGNMENT_OP expression
    (12) declaration -> type . VARIABLE

    VARIABLE        shift and go to state 49


state 15

    (38) print_statement -> PRINT_DECLARATION . LPAREN expression RPAREN

    LPAREN          shift and go to state 50


state 16

    (39) comment -> COMMENT .

    error           reduce using rule 39 (comment -> COMMENT .)
    VARIABLE        reduce using rule 39 (comment -> COMMENT .)
    PRINT_DECLARATION reduce using rule 39 (comment -> COMMENT .)
    COMMENT         reduce using rule 39 (comment -> COMMENT .)
    MINUS_OP        reduce using rule 39 (comment -> COMMENT .)
    LOGICAL_OP_NOT  reduce using rule 39 (comment -> COMMENT .)
    NUMBER_INTEGER  reduce using rule 39 (comment -> COMMENT .)
    NUMBER_FLOAT    reduce using rule 39 (comment -> COMMENT .)
    TRUE            reduce using rule 39 (comment -> COMMENT .)
    FALSE           reduce using rule 39 (comment -> COMMENT .)
    NULL            reduce using rule 39 (comment -> COMMENT .)
    TEXT_CHAR       reduce using rule 39 (comment -> COMMENT .)
    TEXT_STRING     reduce using rule 39 (comment -> COMMENT .)
    TYPE_INTEGER    reduce using rule 39 (comment -> COMMENT .)
    TYPE_FLOAT      reduce using rule 39 (comment -> COMMENT .)
    TYPE_BOOLEAN    reduce using rule 39 (comment -> COMMENT .)
    TYPE_CHAR       reduce using rule 39 (comment -> COMMENT .)
    TYPE_STRING     reduce using rule 39 (comment -> COMMENT .)
    $end            reduce using rule 39 (comment -> COMMENT .)


state 17

    (28) unitary_expression -> MINUS_OP . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 51
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 18

    (29) unitary_expression -> LOGICAL_OP_NOT . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 53
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 19

    (31) primary_expression -> NUMBER_INTEGER .

    END_LINE        reduce using rule 31 (primary_expression -> NUMBER_INTEGER .)
    PLUS_OP         reduce using rule 31 (primary_expression -> NUMBER_INTEGER .)
    MINUS_OP        reduce using rule 31 (primary_expression -> NUMBER_INTEGER .)
    MUL_OP          reduce using rule 31 (primary_expression -> NUMBER_INTEGER .)
    DIV_OP          reduce using rule 31 (primary_expression -> NUMBER_INTEGER .)
    LESS_OP         reduce using rule 31 (primary_expression -> NUMBER_INTEGER .)
    GREATER_OP      reduce using rule 31 (primary_expression -> NUMBER_INTEGER .)
    LESS_EQUAL_OP   reduce using rule 31 (primary_expression -> NUMBER_INTEGER .)
    GREATER_EQUAL_OP reduce using rule 31 (primary_expression -> NUMBER_INTEGER .)
    EQUAL_OP        reduce using rule 31 (primary_expression -> NUMBER_INTEGER .)
    DIFFERENT_OP    reduce using rule 31 (primary_expression -> NUMBER_INTEGER .)
    LOGICAL_OP_AND  reduce using rule 31 (primary_expression -> NUMBER_INTEGER .)
    LOGICAL_OP_OR   reduce using rule 31 (primary_expression -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 31 (primary_expression -> NUMBER_INTEGER .)


state 20

    (32) primary_expression -> NUMBER_FLOAT .

    END_LINE        reduce using rule 32 (primary_expression -> NUMBER_FLOAT .)
    PLUS_OP         reduce using rule 32 (primary_expression -> NUMBER_FLOAT .)
    MINUS_OP        reduce using rule 32 (primary_expression -> NUMBER_FLOAT .)
    MUL_OP          reduce using rule 32 (primary_expression -> NUMBER_FLOAT .)
    DIV_OP          reduce using rule 32 (primary_expression -> NUMBER_FLOAT .)
    LESS_OP         reduce using rule 32 (primary_expression -> NUMBER_FLOAT .)
    GREATER_OP      reduce using rule 32 (primary_expression -> NUMBER_FLOAT .)
    LESS_EQUAL_OP   reduce using rule 32 (primary_expression -> NUMBER_FLOAT .)
    GREATER_EQUAL_OP reduce using rule 32 (primary_expression -> NUMBER_FLOAT .)
    EQUAL_OP        reduce using rule 32 (primary_expression -> NUMBER_FLOAT .)
    DIFFERENT_OP    reduce using rule 32 (primary_expression -> NUMBER_FLOAT .)
    LOGICAL_OP_AND  reduce using rule 32 (primary_expression -> NUMBER_FLOAT .)
    LOGICAL_OP_OR   reduce using rule 32 (primary_expression -> NUMBER_FLOAT .)
    RPAREN          reduce using rule 32 (primary_expression -> NUMBER_FLOAT .)


state 21

    (33) primary_expression -> TRUE .

    END_LINE        reduce using rule 33 (primary_expression -> TRUE .)
    PLUS_OP         reduce using rule 33 (primary_expression -> TRUE .)
    MINUS_OP        reduce using rule 33 (primary_expression -> TRUE .)
    MUL_OP          reduce using rule 33 (primary_expression -> TRUE .)
    DIV_OP          reduce using rule 33 (primary_expression -> TRUE .)
    LESS_OP         reduce using rule 33 (primary_expression -> TRUE .)
    GREATER_OP      reduce using rule 33 (primary_expression -> TRUE .)
    LESS_EQUAL_OP   reduce using rule 33 (primary_expression -> TRUE .)
    GREATER_EQUAL_OP reduce using rule 33 (primary_expression -> TRUE .)
    EQUAL_OP        reduce using rule 33 (primary_expression -> TRUE .)
    DIFFERENT_OP    reduce using rule 33 (primary_expression -> TRUE .)
    LOGICAL_OP_AND  reduce using rule 33 (primary_expression -> TRUE .)
    LOGICAL_OP_OR   reduce using rule 33 (primary_expression -> TRUE .)
    RPAREN          reduce using rule 33 (primary_expression -> TRUE .)


state 22

    (34) primary_expression -> FALSE .

    END_LINE        reduce using rule 34 (primary_expression -> FALSE .)
    PLUS_OP         reduce using rule 34 (primary_expression -> FALSE .)
    MINUS_OP        reduce using rule 34 (primary_expression -> FALSE .)
    MUL_OP          reduce using rule 34 (primary_expression -> FALSE .)
    DIV_OP          reduce using rule 34 (primary_expression -> FALSE .)
    LESS_OP         reduce using rule 34 (primary_expression -> FALSE .)
    GREATER_OP      reduce using rule 34 (primary_expression -> FALSE .)
    LESS_EQUAL_OP   reduce using rule 34 (primary_expression -> FALSE .)
    GREATER_EQUAL_OP reduce using rule 34 (primary_expression -> FALSE .)
    EQUAL_OP        reduce using rule 34 (primary_expression -> FALSE .)
    DIFFERENT_OP    reduce using rule 34 (primary_expression -> FALSE .)
    LOGICAL_OP_AND  reduce using rule 34 (primary_expression -> FALSE .)
    LOGICAL_OP_OR   reduce using rule 34 (primary_expression -> FALSE .)
    RPAREN          reduce using rule 34 (primary_expression -> FALSE .)


state 23

    (35) primary_expression -> NULL .

    END_LINE        reduce using rule 35 (primary_expression -> NULL .)
    PLUS_OP         reduce using rule 35 (primary_expression -> NULL .)
    MINUS_OP        reduce using rule 35 (primary_expression -> NULL .)
    MUL_OP          reduce using rule 35 (primary_expression -> NULL .)
    DIV_OP          reduce using rule 35 (primary_expression -> NULL .)
    LESS_OP         reduce using rule 35 (primary_expression -> NULL .)
    GREATER_OP      reduce using rule 35 (primary_expression -> NULL .)
    LESS_EQUAL_OP   reduce using rule 35 (primary_expression -> NULL .)
    GREATER_EQUAL_OP reduce using rule 35 (primary_expression -> NULL .)
    EQUAL_OP        reduce using rule 35 (primary_expression -> NULL .)
    DIFFERENT_OP    reduce using rule 35 (primary_expression -> NULL .)
    LOGICAL_OP_AND  reduce using rule 35 (primary_expression -> NULL .)
    LOGICAL_OP_OR   reduce using rule 35 (primary_expression -> NULL .)
    RPAREN          reduce using rule 35 (primary_expression -> NULL .)


state 24

    (36) primary_expression -> TEXT_CHAR .

    END_LINE        reduce using rule 36 (primary_expression -> TEXT_CHAR .)
    PLUS_OP         reduce using rule 36 (primary_expression -> TEXT_CHAR .)
    MINUS_OP        reduce using rule 36 (primary_expression -> TEXT_CHAR .)
    MUL_OP          reduce using rule 36 (primary_expression -> TEXT_CHAR .)
    DIV_OP          reduce using rule 36 (primary_expression -> TEXT_CHAR .)
    LESS_OP         reduce using rule 36 (primary_expression -> TEXT_CHAR .)
    GREATER_OP      reduce using rule 36 (primary_expression -> TEXT_CHAR .)
    LESS_EQUAL_OP   reduce using rule 36 (primary_expression -> TEXT_CHAR .)
    GREATER_EQUAL_OP reduce using rule 36 (primary_expression -> TEXT_CHAR .)
    EQUAL_OP        reduce using rule 36 (primary_expression -> TEXT_CHAR .)
    DIFFERENT_OP    reduce using rule 36 (primary_expression -> TEXT_CHAR .)
    LOGICAL_OP_AND  reduce using rule 36 (primary_expression -> TEXT_CHAR .)
    LOGICAL_OP_OR   reduce using rule 36 (primary_expression -> TEXT_CHAR .)
    RPAREN          reduce using rule 36 (primary_expression -> TEXT_CHAR .)


state 25

    (37) primary_expression -> TEXT_STRING .

    END_LINE        reduce using rule 37 (primary_expression -> TEXT_STRING .)
    PLUS_OP         reduce using rule 37 (primary_expression -> TEXT_STRING .)
    MINUS_OP        reduce using rule 37 (primary_expression -> TEXT_STRING .)
    MUL_OP          reduce using rule 37 (primary_expression -> TEXT_STRING .)
    DIV_OP          reduce using rule 37 (primary_expression -> TEXT_STRING .)
    LESS_OP         reduce using rule 37 (primary_expression -> TEXT_STRING .)
    GREATER_OP      reduce using rule 37 (primary_expression -> TEXT_STRING .)
    LESS_EQUAL_OP   reduce using rule 37 (primary_expression -> TEXT_STRING .)
    GREATER_EQUAL_OP reduce using rule 37 (primary_expression -> TEXT_STRING .)
    EQUAL_OP        reduce using rule 37 (primary_expression -> TEXT_STRING .)
    DIFFERENT_OP    reduce using rule 37 (primary_expression -> TEXT_STRING .)
    LOGICAL_OP_AND  reduce using rule 37 (primary_expression -> TEXT_STRING .)
    LOGICAL_OP_OR   reduce using rule 37 (primary_expression -> TEXT_STRING .)
    RPAREN          reduce using rule 37 (primary_expression -> TEXT_STRING .)


state 26

    (41) type -> TYPE_INTEGER .

    VARIABLE        reduce using rule 41 (type -> TYPE_INTEGER .)


state 27

    (42) type -> TYPE_FLOAT .

    VARIABLE        reduce using rule 42 (type -> TYPE_FLOAT .)


state 28

    (43) type -> TYPE_BOOLEAN .

    VARIABLE        reduce using rule 43 (type -> TYPE_BOOLEAN .)


state 29

    (44) type -> TYPE_CHAR .

    VARIABLE        reduce using rule 44 (type -> TYPE_CHAR .)


state 30

    (45) type -> TYPE_STRING .

    VARIABLE        reduce using rule 45 (type -> TYPE_STRING .)


state 31

    (2) statement_list -> statement_list statement .

    error           reduce using rule 2 (statement_list -> statement_list statement .)
    VARIABLE        reduce using rule 2 (statement_list -> statement_list statement .)
    PRINT_DECLARATION reduce using rule 2 (statement_list -> statement_list statement .)
    COMMENT         reduce using rule 2 (statement_list -> statement_list statement .)
    MINUS_OP        reduce using rule 2 (statement_list -> statement_list statement .)
    LOGICAL_OP_NOT  reduce using rule 2 (statement_list -> statement_list statement .)
    NUMBER_INTEGER  reduce using rule 2 (statement_list -> statement_list statement .)
    NUMBER_FLOAT    reduce using rule 2 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 2 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 2 (statement_list -> statement_list statement .)
    NULL            reduce using rule 2 (statement_list -> statement_list statement .)
    TEXT_CHAR       reduce using rule 2 (statement_list -> statement_list statement .)
    TEXT_STRING     reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE_INTEGER    reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE_FLOAT      reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE_BOOLEAN    reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE_CHAR       reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE_STRING     reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)


state 32

    (4) statement -> expression END_LINE .

    error           reduce using rule 4 (statement -> expression END_LINE .)
    VARIABLE        reduce using rule 4 (statement -> expression END_LINE .)
    PRINT_DECLARATION reduce using rule 4 (statement -> expression END_LINE .)
    COMMENT         reduce using rule 4 (statement -> expression END_LINE .)
    MINUS_OP        reduce using rule 4 (statement -> expression END_LINE .)
    LOGICAL_OP_NOT  reduce using rule 4 (statement -> expression END_LINE .)
    NUMBER_INTEGER  reduce using rule 4 (statement -> expression END_LINE .)
    NUMBER_FLOAT    reduce using rule 4 (statement -> expression END_LINE .)
    TRUE            reduce using rule 4 (statement -> expression END_LINE .)
    FALSE           reduce using rule 4 (statement -> expression END_LINE .)
    NULL            reduce using rule 4 (statement -> expression END_LINE .)
    TEXT_CHAR       reduce using rule 4 (statement -> expression END_LINE .)
    TEXT_STRING     reduce using rule 4 (statement -> expression END_LINE .)
    TYPE_INTEGER    reduce using rule 4 (statement -> expression END_LINE .)
    TYPE_FLOAT      reduce using rule 4 (statement -> expression END_LINE .)
    TYPE_BOOLEAN    reduce using rule 4 (statement -> expression END_LINE .)
    TYPE_CHAR       reduce using rule 4 (statement -> expression END_LINE .)
    TYPE_STRING     reduce using rule 4 (statement -> expression END_LINE .)
    $end            reduce using rule 4 (statement -> expression END_LINE .)


state 33

    (16) binary_expression -> expression PLUS_OP . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 54
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 34

    (17) binary_expression -> expression MINUS_OP . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 55
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 35

    (18) binary_expression -> expression MUL_OP . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 56
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 36

    (19) binary_expression -> expression DIV_OP . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 57
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 37

    (20) binary_expression -> expression LESS_OP . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 58
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 38

    (21) binary_expression -> expression GREATER_OP . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 59
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 39

    (22) binary_expression -> expression LESS_EQUAL_OP . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 60
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 40

    (23) binary_expression -> expression GREATER_EQUAL_OP . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 61
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 41

    (24) binary_expression -> expression EQUAL_OP . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 62
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 42

    (25) binary_expression -> expression DIFFERENT_OP . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 63
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 43

    (26) binary_expression -> expression LOGICAL_OP_AND . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 64
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 44

    (27) binary_expression -> expression LOGICAL_OP_OR . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 65
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 45

    (5) statement -> assignment END_LINE .

    error           reduce using rule 5 (statement -> assignment END_LINE .)
    VARIABLE        reduce using rule 5 (statement -> assignment END_LINE .)
    PRINT_DECLARATION reduce using rule 5 (statement -> assignment END_LINE .)
    COMMENT         reduce using rule 5 (statement -> assignment END_LINE .)
    MINUS_OP        reduce using rule 5 (statement -> assignment END_LINE .)
    LOGICAL_OP_NOT  reduce using rule 5 (statement -> assignment END_LINE .)
    NUMBER_INTEGER  reduce using rule 5 (statement -> assignment END_LINE .)
    NUMBER_FLOAT    reduce using rule 5 (statement -> assignment END_LINE .)
    TRUE            reduce using rule 5 (statement -> assignment END_LINE .)
    FALSE           reduce using rule 5 (statement -> assignment END_LINE .)
    NULL            reduce using rule 5 (statement -> assignment END_LINE .)
    TEXT_CHAR       reduce using rule 5 (statement -> assignment END_LINE .)
    TEXT_STRING     reduce using rule 5 (statement -> assignment END_LINE .)
    TYPE_INTEGER    reduce using rule 5 (statement -> assignment END_LINE .)
    TYPE_FLOAT      reduce using rule 5 (statement -> assignment END_LINE .)
    TYPE_BOOLEAN    reduce using rule 5 (statement -> assignment END_LINE .)
    TYPE_CHAR       reduce using rule 5 (statement -> assignment END_LINE .)
    TYPE_STRING     reduce using rule 5 (statement -> assignment END_LINE .)
    $end            reduce using rule 5 (statement -> assignment END_LINE .)


state 46

    (6) statement -> declaration END_LINE .

    error           reduce using rule 6 (statement -> declaration END_LINE .)
    VARIABLE        reduce using rule 6 (statement -> declaration END_LINE .)
    PRINT_DECLARATION reduce using rule 6 (statement -> declaration END_LINE .)
    COMMENT         reduce using rule 6 (statement -> declaration END_LINE .)
    MINUS_OP        reduce using rule 6 (statement -> declaration END_LINE .)
    LOGICAL_OP_NOT  reduce using rule 6 (statement -> declaration END_LINE .)
    NUMBER_INTEGER  reduce using rule 6 (statement -> declaration END_LINE .)
    NUMBER_FLOAT    reduce using rule 6 (statement -> declaration END_LINE .)
    TRUE            reduce using rule 6 (statement -> declaration END_LINE .)
    FALSE           reduce using rule 6 (statement -> declaration END_LINE .)
    NULL            reduce using rule 6 (statement -> declaration END_LINE .)
    TEXT_CHAR       reduce using rule 6 (statement -> declaration END_LINE .)
    TEXT_STRING     reduce using rule 6 (statement -> declaration END_LINE .)
    TYPE_INTEGER    reduce using rule 6 (statement -> declaration END_LINE .)
    TYPE_FLOAT      reduce using rule 6 (statement -> declaration END_LINE .)
    TYPE_BOOLEAN    reduce using rule 6 (statement -> declaration END_LINE .)
    TYPE_CHAR       reduce using rule 6 (statement -> declaration END_LINE .)
    TYPE_STRING     reduce using rule 6 (statement -> declaration END_LINE .)
    $end            reduce using rule 6 (statement -> declaration END_LINE .)


state 47

    (7) statement -> print_statement END_LINE .

    error           reduce using rule 7 (statement -> print_statement END_LINE .)
    VARIABLE        reduce using rule 7 (statement -> print_statement END_LINE .)
    PRINT_DECLARATION reduce using rule 7 (statement -> print_statement END_LINE .)
    COMMENT         reduce using rule 7 (statement -> print_statement END_LINE .)
    MINUS_OP        reduce using rule 7 (statement -> print_statement END_LINE .)
    LOGICAL_OP_NOT  reduce using rule 7 (statement -> print_statement END_LINE .)
    NUMBER_INTEGER  reduce using rule 7 (statement -> print_statement END_LINE .)
    NUMBER_FLOAT    reduce using rule 7 (statement -> print_statement END_LINE .)
    TRUE            reduce using rule 7 (statement -> print_statement END_LINE .)
    FALSE           reduce using rule 7 (statement -> print_statement END_LINE .)
    NULL            reduce using rule 7 (statement -> print_statement END_LINE .)
    TEXT_CHAR       reduce using rule 7 (statement -> print_statement END_LINE .)
    TEXT_STRING     reduce using rule 7 (statement -> print_statement END_LINE .)
    TYPE_INTEGER    reduce using rule 7 (statement -> print_statement END_LINE .)
    TYPE_FLOAT      reduce using rule 7 (statement -> print_statement END_LINE .)
    TYPE_BOOLEAN    reduce using rule 7 (statement -> print_statement END_LINE .)
    TYPE_CHAR       reduce using rule 7 (statement -> print_statement END_LINE .)
    TYPE_STRING     reduce using rule 7 (statement -> print_statement END_LINE .)
    $end            reduce using rule 7 (statement -> print_statement END_LINE .)


state 48

    (10) assignment -> VARIABLE ASSIGNMENT_OP . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 66
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 49

    (11) declaration -> type VARIABLE . ASSIGNMENT_OP expression
    (12) declaration -> type VARIABLE .

    ASSIGNMENT_OP   shift and go to state 67
    END_LINE        reduce using rule 12 (declaration -> type VARIABLE .)


state 50

    (38) print_statement -> PRINT_DECLARATION LPAREN . expression RPAREN
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 68
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 51

    (28) unitary_expression -> MINUS_OP expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 28 (unitary_expression -> MINUS_OP expression .)
    PLUS_OP         reduce using rule 28 (unitary_expression -> MINUS_OP expression .)
    MINUS_OP        reduce using rule 28 (unitary_expression -> MINUS_OP expression .)
    LESS_OP         reduce using rule 28 (unitary_expression -> MINUS_OP expression .)
    GREATER_OP      reduce using rule 28 (unitary_expression -> MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 28 (unitary_expression -> MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 28 (unitary_expression -> MINUS_OP expression .)
    EQUAL_OP        reduce using rule 28 (unitary_expression -> MINUS_OP expression .)
    DIFFERENT_OP    reduce using rule 28 (unitary_expression -> MINUS_OP expression .)
    LOGICAL_OP_AND  reduce using rule 28 (unitary_expression -> MINUS_OP expression .)
    LOGICAL_OP_OR   reduce using rule 28 (unitary_expression -> MINUS_OP expression .)
    RPAREN          reduce using rule 28 (unitary_expression -> MINUS_OP expression .)
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36

  ! MUL_OP          [ reduce using rule 28 (unitary_expression -> MINUS_OP expression .) ]
  ! DIV_OP          [ reduce using rule 28 (unitary_expression -> MINUS_OP expression .) ]
  ! PLUS_OP         [ shift and go to state 33 ]
  ! MINUS_OP        [ shift and go to state 34 ]
  ! LESS_OP         [ shift and go to state 37 ]
  ! GREATER_OP      [ shift and go to state 38 ]
  ! LESS_EQUAL_OP   [ shift and go to state 39 ]
  ! GREATER_EQUAL_OP [ shift and go to state 40 ]
  ! EQUAL_OP        [ shift and go to state 41 ]
  ! DIFFERENT_OP    [ shift and go to state 42 ]
  ! LOGICAL_OP_AND  [ shift and go to state 43 ]
  ! LOGICAL_OP_OR   [ shift and go to state 44 ]


state 52

    (30) primary_expression -> VARIABLE .

    PLUS_OP         reduce using rule 30 (primary_expression -> VARIABLE .)
    MINUS_OP        reduce using rule 30 (primary_expression -> VARIABLE .)
    MUL_OP          reduce using rule 30 (primary_expression -> VARIABLE .)
    DIV_OP          reduce using rule 30 (primary_expression -> VARIABLE .)
    LESS_OP         reduce using rule 30 (primary_expression -> VARIABLE .)
    GREATER_OP      reduce using rule 30 (primary_expression -> VARIABLE .)
    LESS_EQUAL_OP   reduce using rule 30 (primary_expression -> VARIABLE .)
    GREATER_EQUAL_OP reduce using rule 30 (primary_expression -> VARIABLE .)
    EQUAL_OP        reduce using rule 30 (primary_expression -> VARIABLE .)
    DIFFERENT_OP    reduce using rule 30 (primary_expression -> VARIABLE .)
    LOGICAL_OP_AND  reduce using rule 30 (primary_expression -> VARIABLE .)
    LOGICAL_OP_OR   reduce using rule 30 (primary_expression -> VARIABLE .)
    END_LINE        reduce using rule 30 (primary_expression -> VARIABLE .)
    RPAREN          reduce using rule 30 (primary_expression -> VARIABLE .)


state 53

    (29) unitary_expression -> LOGICAL_OP_NOT expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 29 (unitary_expression -> LOGICAL_OP_NOT expression .)
    LOGICAL_OP_AND  reduce using rule 29 (unitary_expression -> LOGICAL_OP_NOT expression .)
    LOGICAL_OP_OR   reduce using rule 29 (unitary_expression -> LOGICAL_OP_NOT expression .)
    RPAREN          reduce using rule 29 (unitary_expression -> LOGICAL_OP_NOT expression .)
    PLUS_OP         shift and go to state 33
    MINUS_OP        shift and go to state 34
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36
    LESS_OP         shift and go to state 37
    GREATER_OP      shift and go to state 38
    LESS_EQUAL_OP   shift and go to state 39
    GREATER_EQUAL_OP shift and go to state 40
    EQUAL_OP        shift and go to state 41
    DIFFERENT_OP    shift and go to state 42

  ! PLUS_OP         [ reduce using rule 29 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! MINUS_OP        [ reduce using rule 29 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! MUL_OP          [ reduce using rule 29 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! DIV_OP          [ reduce using rule 29 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! LESS_OP         [ reduce using rule 29 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! GREATER_OP      [ reduce using rule 29 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 29 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 29 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! EQUAL_OP        [ reduce using rule 29 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! DIFFERENT_OP    [ reduce using rule 29 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! LOGICAL_OP_AND  [ shift and go to state 43 ]
  ! LOGICAL_OP_OR   [ shift and go to state 44 ]


state 54

    (16) binary_expression -> expression PLUS_OP expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 16 (binary_expression -> expression PLUS_OP expression .)
    PLUS_OP         reduce using rule 16 (binary_expression -> expression PLUS_OP expression .)
    MINUS_OP        reduce using rule 16 (binary_expression -> expression PLUS_OP expression .)
    LESS_OP         reduce using rule 16 (binary_expression -> expression PLUS_OP expression .)
    GREATER_OP      reduce using rule 16 (binary_expression -> expression PLUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 16 (binary_expression -> expression PLUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 16 (binary_expression -> expression PLUS_OP expression .)
    EQUAL_OP        reduce using rule 16 (binary_expression -> expression PLUS_OP expression .)
    DIFFERENT_OP    reduce using rule 16 (binary_expression -> expression PLUS_OP expression .)
    LOGICAL_OP_AND  reduce using rule 16 (binary_expression -> expression PLUS_OP expression .)
    LOGICAL_OP_OR   reduce using rule 16 (binary_expression -> expression PLUS_OP expression .)
    RPAREN          reduce using rule 16 (binary_expression -> expression PLUS_OP expression .)
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36

  ! MUL_OP          [ reduce using rule 16 (binary_expression -> expression PLUS_OP expression .) ]
  ! DIV_OP          [ reduce using rule 16 (binary_expression -> expression PLUS_OP expression .) ]
  ! PLUS_OP         [ shift and go to state 33 ]
  ! MINUS_OP        [ shift and go to state 34 ]
  ! LESS_OP         [ shift and go to state 37 ]
  ! GREATER_OP      [ shift and go to state 38 ]
  ! LESS_EQUAL_OP   [ shift and go to state 39 ]
  ! GREATER_EQUAL_OP [ shift and go to state 40 ]
  ! EQUAL_OP        [ shift and go to state 41 ]
  ! DIFFERENT_OP    [ shift and go to state 42 ]
  ! LOGICAL_OP_AND  [ shift and go to state 43 ]
  ! LOGICAL_OP_OR   [ shift and go to state 44 ]


state 55

    (17) binary_expression -> expression MINUS_OP expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 17 (binary_expression -> expression MINUS_OP expression .)
    PLUS_OP         reduce using rule 17 (binary_expression -> expression MINUS_OP expression .)
    MINUS_OP        reduce using rule 17 (binary_expression -> expression MINUS_OP expression .)
    LESS_OP         reduce using rule 17 (binary_expression -> expression MINUS_OP expression .)
    GREATER_OP      reduce using rule 17 (binary_expression -> expression MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 17 (binary_expression -> expression MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 17 (binary_expression -> expression MINUS_OP expression .)
    EQUAL_OP        reduce using rule 17 (binary_expression -> expression MINUS_OP expression .)
    DIFFERENT_OP    reduce using rule 17 (binary_expression -> expression MINUS_OP expression .)
    LOGICAL_OP_AND  reduce using rule 17 (binary_expression -> expression MINUS_OP expression .)
    LOGICAL_OP_OR   reduce using rule 17 (binary_expression -> expression MINUS_OP expression .)
    RPAREN          reduce using rule 17 (binary_expression -> expression MINUS_OP expression .)
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36

  ! MUL_OP          [ reduce using rule 17 (binary_expression -> expression MINUS_OP expression .) ]
  ! DIV_OP          [ reduce using rule 17 (binary_expression -> expression MINUS_OP expression .) ]
  ! PLUS_OP         [ shift and go to state 33 ]
  ! MINUS_OP        [ shift and go to state 34 ]
  ! LESS_OP         [ shift and go to state 37 ]
  ! GREATER_OP      [ shift and go to state 38 ]
  ! LESS_EQUAL_OP   [ shift and go to state 39 ]
  ! GREATER_EQUAL_OP [ shift and go to state 40 ]
  ! EQUAL_OP        [ shift and go to state 41 ]
  ! DIFFERENT_OP    [ shift and go to state 42 ]
  ! LOGICAL_OP_AND  [ shift and go to state 43 ]
  ! LOGICAL_OP_OR   [ shift and go to state 44 ]


state 56

    (18) binary_expression -> expression MUL_OP expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 18 (binary_expression -> expression MUL_OP expression .)
    PLUS_OP         reduce using rule 18 (binary_expression -> expression MUL_OP expression .)
    MINUS_OP        reduce using rule 18 (binary_expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 18 (binary_expression -> expression MUL_OP expression .)
    DIV_OP          reduce using rule 18 (binary_expression -> expression MUL_OP expression .)
    LESS_OP         reduce using rule 18 (binary_expression -> expression MUL_OP expression .)
    GREATER_OP      reduce using rule 18 (binary_expression -> expression MUL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 18 (binary_expression -> expression MUL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 18 (binary_expression -> expression MUL_OP expression .)
    EQUAL_OP        reduce using rule 18 (binary_expression -> expression MUL_OP expression .)
    DIFFERENT_OP    reduce using rule 18 (binary_expression -> expression MUL_OP expression .)
    LOGICAL_OP_AND  reduce using rule 18 (binary_expression -> expression MUL_OP expression .)
    LOGICAL_OP_OR   reduce using rule 18 (binary_expression -> expression MUL_OP expression .)
    RPAREN          reduce using rule 18 (binary_expression -> expression MUL_OP expression .)

  ! PLUS_OP         [ shift and go to state 33 ]
  ! MINUS_OP        [ shift and go to state 34 ]
  ! MUL_OP          [ shift and go to state 35 ]
  ! DIV_OP          [ shift and go to state 36 ]
  ! LESS_OP         [ shift and go to state 37 ]
  ! GREATER_OP      [ shift and go to state 38 ]
  ! LESS_EQUAL_OP   [ shift and go to state 39 ]
  ! GREATER_EQUAL_OP [ shift and go to state 40 ]
  ! EQUAL_OP        [ shift and go to state 41 ]
  ! DIFFERENT_OP    [ shift and go to state 42 ]
  ! LOGICAL_OP_AND  [ shift and go to state 43 ]
  ! LOGICAL_OP_OR   [ shift and go to state 44 ]


state 57

    (19) binary_expression -> expression DIV_OP expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 19 (binary_expression -> expression DIV_OP expression .)
    PLUS_OP         reduce using rule 19 (binary_expression -> expression DIV_OP expression .)
    MINUS_OP        reduce using rule 19 (binary_expression -> expression DIV_OP expression .)
    MUL_OP          reduce using rule 19 (binary_expression -> expression DIV_OP expression .)
    DIV_OP          reduce using rule 19 (binary_expression -> expression DIV_OP expression .)
    LESS_OP         reduce using rule 19 (binary_expression -> expression DIV_OP expression .)
    GREATER_OP      reduce using rule 19 (binary_expression -> expression DIV_OP expression .)
    LESS_EQUAL_OP   reduce using rule 19 (binary_expression -> expression DIV_OP expression .)
    GREATER_EQUAL_OP reduce using rule 19 (binary_expression -> expression DIV_OP expression .)
    EQUAL_OP        reduce using rule 19 (binary_expression -> expression DIV_OP expression .)
    DIFFERENT_OP    reduce using rule 19 (binary_expression -> expression DIV_OP expression .)
    LOGICAL_OP_AND  reduce using rule 19 (binary_expression -> expression DIV_OP expression .)
    LOGICAL_OP_OR   reduce using rule 19 (binary_expression -> expression DIV_OP expression .)
    RPAREN          reduce using rule 19 (binary_expression -> expression DIV_OP expression .)

  ! PLUS_OP         [ shift and go to state 33 ]
  ! MINUS_OP        [ shift and go to state 34 ]
  ! MUL_OP          [ shift and go to state 35 ]
  ! DIV_OP          [ shift and go to state 36 ]
  ! LESS_OP         [ shift and go to state 37 ]
  ! GREATER_OP      [ shift and go to state 38 ]
  ! LESS_EQUAL_OP   [ shift and go to state 39 ]
  ! GREATER_EQUAL_OP [ shift and go to state 40 ]
  ! EQUAL_OP        [ shift and go to state 41 ]
  ! DIFFERENT_OP    [ shift and go to state 42 ]
  ! LOGICAL_OP_AND  [ shift and go to state 43 ]
  ! LOGICAL_OP_OR   [ shift and go to state 44 ]


state 58

    (20) binary_expression -> expression LESS_OP expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 20 (binary_expression -> expression LESS_OP expression .)
    LESS_OP         reduce using rule 20 (binary_expression -> expression LESS_OP expression .)
    GREATER_OP      reduce using rule 20 (binary_expression -> expression LESS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 20 (binary_expression -> expression LESS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 20 (binary_expression -> expression LESS_OP expression .)
    EQUAL_OP        reduce using rule 20 (binary_expression -> expression LESS_OP expression .)
    DIFFERENT_OP    reduce using rule 20 (binary_expression -> expression LESS_OP expression .)
    LOGICAL_OP_AND  reduce using rule 20 (binary_expression -> expression LESS_OP expression .)
    LOGICAL_OP_OR   reduce using rule 20 (binary_expression -> expression LESS_OP expression .)
    RPAREN          reduce using rule 20 (binary_expression -> expression LESS_OP expression .)
    PLUS_OP         shift and go to state 33
    MINUS_OP        shift and go to state 34
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36

  ! PLUS_OP         [ reduce using rule 20 (binary_expression -> expression LESS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 20 (binary_expression -> expression LESS_OP expression .) ]
  ! MUL_OP          [ reduce using rule 20 (binary_expression -> expression LESS_OP expression .) ]
  ! DIV_OP          [ reduce using rule 20 (binary_expression -> expression LESS_OP expression .) ]
  ! LESS_OP         [ shift and go to state 37 ]
  ! GREATER_OP      [ shift and go to state 38 ]
  ! LESS_EQUAL_OP   [ shift and go to state 39 ]
  ! GREATER_EQUAL_OP [ shift and go to state 40 ]
  ! EQUAL_OP        [ shift and go to state 41 ]
  ! DIFFERENT_OP    [ shift and go to state 42 ]
  ! LOGICAL_OP_AND  [ shift and go to state 43 ]
  ! LOGICAL_OP_OR   [ shift and go to state 44 ]


state 59

    (21) binary_expression -> expression GREATER_OP expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 21 (binary_expression -> expression GREATER_OP expression .)
    LESS_OP         reduce using rule 21 (binary_expression -> expression GREATER_OP expression .)
    GREATER_OP      reduce using rule 21 (binary_expression -> expression GREATER_OP expression .)
    LESS_EQUAL_OP   reduce using rule 21 (binary_expression -> expression GREATER_OP expression .)
    GREATER_EQUAL_OP reduce using rule 21 (binary_expression -> expression GREATER_OP expression .)
    EQUAL_OP        reduce using rule 21 (binary_expression -> expression GREATER_OP expression .)
    DIFFERENT_OP    reduce using rule 21 (binary_expression -> expression GREATER_OP expression .)
    LOGICAL_OP_AND  reduce using rule 21 (binary_expression -> expression GREATER_OP expression .)
    LOGICAL_OP_OR   reduce using rule 21 (binary_expression -> expression GREATER_OP expression .)
    RPAREN          reduce using rule 21 (binary_expression -> expression GREATER_OP expression .)
    PLUS_OP         shift and go to state 33
    MINUS_OP        shift and go to state 34
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36

  ! PLUS_OP         [ reduce using rule 21 (binary_expression -> expression GREATER_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 21 (binary_expression -> expression GREATER_OP expression .) ]
  ! MUL_OP          [ reduce using rule 21 (binary_expression -> expression GREATER_OP expression .) ]
  ! DIV_OP          [ reduce using rule 21 (binary_expression -> expression GREATER_OP expression .) ]
  ! LESS_OP         [ shift and go to state 37 ]
  ! GREATER_OP      [ shift and go to state 38 ]
  ! LESS_EQUAL_OP   [ shift and go to state 39 ]
  ! GREATER_EQUAL_OP [ shift and go to state 40 ]
  ! EQUAL_OP        [ shift and go to state 41 ]
  ! DIFFERENT_OP    [ shift and go to state 42 ]
  ! LOGICAL_OP_AND  [ shift and go to state 43 ]
  ! LOGICAL_OP_OR   [ shift and go to state 44 ]


state 60

    (22) binary_expression -> expression LESS_EQUAL_OP expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 22 (binary_expression -> expression LESS_EQUAL_OP expression .)
    LESS_OP         reduce using rule 22 (binary_expression -> expression LESS_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 22 (binary_expression -> expression LESS_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 22 (binary_expression -> expression LESS_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 22 (binary_expression -> expression LESS_EQUAL_OP expression .)
    EQUAL_OP        reduce using rule 22 (binary_expression -> expression LESS_EQUAL_OP expression .)
    DIFFERENT_OP    reduce using rule 22 (binary_expression -> expression LESS_EQUAL_OP expression .)
    LOGICAL_OP_AND  reduce using rule 22 (binary_expression -> expression LESS_EQUAL_OP expression .)
    LOGICAL_OP_OR   reduce using rule 22 (binary_expression -> expression LESS_EQUAL_OP expression .)
    RPAREN          reduce using rule 22 (binary_expression -> expression LESS_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 33
    MINUS_OP        shift and go to state 34
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36

  ! PLUS_OP         [ reduce using rule 22 (binary_expression -> expression LESS_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 22 (binary_expression -> expression LESS_EQUAL_OP expression .) ]
  ! MUL_OP          [ reduce using rule 22 (binary_expression -> expression LESS_EQUAL_OP expression .) ]
  ! DIV_OP          [ reduce using rule 22 (binary_expression -> expression LESS_EQUAL_OP expression .) ]
  ! LESS_OP         [ shift and go to state 37 ]
  ! GREATER_OP      [ shift and go to state 38 ]
  ! LESS_EQUAL_OP   [ shift and go to state 39 ]
  ! GREATER_EQUAL_OP [ shift and go to state 40 ]
  ! EQUAL_OP        [ shift and go to state 41 ]
  ! DIFFERENT_OP    [ shift and go to state 42 ]
  ! LOGICAL_OP_AND  [ shift and go to state 43 ]
  ! LOGICAL_OP_OR   [ shift and go to state 44 ]


state 61

    (23) binary_expression -> expression GREATER_EQUAL_OP expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 23 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    LESS_OP         reduce using rule 23 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 23 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 23 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 23 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    EQUAL_OP        reduce using rule 23 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    DIFFERENT_OP    reduce using rule 23 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    LOGICAL_OP_AND  reduce using rule 23 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    LOGICAL_OP_OR   reduce using rule 23 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    RPAREN          reduce using rule 23 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 33
    MINUS_OP        shift and go to state 34
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36

  ! PLUS_OP         [ reduce using rule 23 (binary_expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 23 (binary_expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MUL_OP          [ reduce using rule 23 (binary_expression -> expression GREATER_EQUAL_OP expression .) ]
  ! DIV_OP          [ reduce using rule 23 (binary_expression -> expression GREATER_EQUAL_OP expression .) ]
  ! LESS_OP         [ shift and go to state 37 ]
  ! GREATER_OP      [ shift and go to state 38 ]
  ! LESS_EQUAL_OP   [ shift and go to state 39 ]
  ! GREATER_EQUAL_OP [ shift and go to state 40 ]
  ! EQUAL_OP        [ shift and go to state 41 ]
  ! DIFFERENT_OP    [ shift and go to state 42 ]
  ! LOGICAL_OP_AND  [ shift and go to state 43 ]
  ! LOGICAL_OP_OR   [ shift and go to state 44 ]


state 62

    (24) binary_expression -> expression EQUAL_OP expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 24 (binary_expression -> expression EQUAL_OP expression .)
    LESS_OP         reduce using rule 24 (binary_expression -> expression EQUAL_OP expression .)
    GREATER_OP      reduce using rule 24 (binary_expression -> expression EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 24 (binary_expression -> expression EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 24 (binary_expression -> expression EQUAL_OP expression .)
    EQUAL_OP        reduce using rule 24 (binary_expression -> expression EQUAL_OP expression .)
    DIFFERENT_OP    reduce using rule 24 (binary_expression -> expression EQUAL_OP expression .)
    LOGICAL_OP_AND  reduce using rule 24 (binary_expression -> expression EQUAL_OP expression .)
    LOGICAL_OP_OR   reduce using rule 24 (binary_expression -> expression EQUAL_OP expression .)
    RPAREN          reduce using rule 24 (binary_expression -> expression EQUAL_OP expression .)
    PLUS_OP         shift and go to state 33
    MINUS_OP        shift and go to state 34
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36

  ! PLUS_OP         [ reduce using rule 24 (binary_expression -> expression EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 24 (binary_expression -> expression EQUAL_OP expression .) ]
  ! MUL_OP          [ reduce using rule 24 (binary_expression -> expression EQUAL_OP expression .) ]
  ! DIV_OP          [ reduce using rule 24 (binary_expression -> expression EQUAL_OP expression .) ]
  ! LESS_OP         [ shift and go to state 37 ]
  ! GREATER_OP      [ shift and go to state 38 ]
  ! LESS_EQUAL_OP   [ shift and go to state 39 ]
  ! GREATER_EQUAL_OP [ shift and go to state 40 ]
  ! EQUAL_OP        [ shift and go to state 41 ]
  ! DIFFERENT_OP    [ shift and go to state 42 ]
  ! LOGICAL_OP_AND  [ shift and go to state 43 ]
  ! LOGICAL_OP_OR   [ shift and go to state 44 ]


state 63

    (25) binary_expression -> expression DIFFERENT_OP expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 25 (binary_expression -> expression DIFFERENT_OP expression .)
    LESS_OP         reduce using rule 25 (binary_expression -> expression DIFFERENT_OP expression .)
    GREATER_OP      reduce using rule 25 (binary_expression -> expression DIFFERENT_OP expression .)
    LESS_EQUAL_OP   reduce using rule 25 (binary_expression -> expression DIFFERENT_OP expression .)
    GREATER_EQUAL_OP reduce using rule 25 (binary_expression -> expression DIFFERENT_OP expression .)
    EQUAL_OP        reduce using rule 25 (binary_expression -> expression DIFFERENT_OP expression .)
    DIFFERENT_OP    reduce using rule 25 (binary_expression -> expression DIFFERENT_OP expression .)
    LOGICAL_OP_AND  reduce using rule 25 (binary_expression -> expression DIFFERENT_OP expression .)
    LOGICAL_OP_OR   reduce using rule 25 (binary_expression -> expression DIFFERENT_OP expression .)
    RPAREN          reduce using rule 25 (binary_expression -> expression DIFFERENT_OP expression .)
    PLUS_OP         shift and go to state 33
    MINUS_OP        shift and go to state 34
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36

  ! PLUS_OP         [ reduce using rule 25 (binary_expression -> expression DIFFERENT_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 25 (binary_expression -> expression DIFFERENT_OP expression .) ]
  ! MUL_OP          [ reduce using rule 25 (binary_expression -> expression DIFFERENT_OP expression .) ]
  ! DIV_OP          [ reduce using rule 25 (binary_expression -> expression DIFFERENT_OP expression .) ]
  ! LESS_OP         [ shift and go to state 37 ]
  ! GREATER_OP      [ shift and go to state 38 ]
  ! LESS_EQUAL_OP   [ shift and go to state 39 ]
  ! GREATER_EQUAL_OP [ shift and go to state 40 ]
  ! EQUAL_OP        [ shift and go to state 41 ]
  ! DIFFERENT_OP    [ shift and go to state 42 ]
  ! LOGICAL_OP_AND  [ shift and go to state 43 ]
  ! LOGICAL_OP_OR   [ shift and go to state 44 ]


state 64

    (26) binary_expression -> expression LOGICAL_OP_AND expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 26 (binary_expression -> expression LOGICAL_OP_AND expression .)
    LOGICAL_OP_AND  reduce using rule 26 (binary_expression -> expression LOGICAL_OP_AND expression .)
    LOGICAL_OP_OR   reduce using rule 26 (binary_expression -> expression LOGICAL_OP_AND expression .)
    RPAREN          reduce using rule 26 (binary_expression -> expression LOGICAL_OP_AND expression .)
    PLUS_OP         shift and go to state 33
    MINUS_OP        shift and go to state 34
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36
    LESS_OP         shift and go to state 37
    GREATER_OP      shift and go to state 38
    LESS_EQUAL_OP   shift and go to state 39
    GREATER_EQUAL_OP shift and go to state 40
    EQUAL_OP        shift and go to state 41
    DIFFERENT_OP    shift and go to state 42

  ! PLUS_OP         [ reduce using rule 26 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! MINUS_OP        [ reduce using rule 26 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! MUL_OP          [ reduce using rule 26 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! DIV_OP          [ reduce using rule 26 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! LESS_OP         [ reduce using rule 26 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! GREATER_OP      [ reduce using rule 26 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 26 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 26 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! EQUAL_OP        [ reduce using rule 26 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! DIFFERENT_OP    [ reduce using rule 26 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! LOGICAL_OP_AND  [ shift and go to state 43 ]
  ! LOGICAL_OP_OR   [ shift and go to state 44 ]


state 65

    (27) binary_expression -> expression LOGICAL_OP_OR expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 27 (binary_expression -> expression LOGICAL_OP_OR expression .)
    LOGICAL_OP_OR   reduce using rule 27 (binary_expression -> expression LOGICAL_OP_OR expression .)
    RPAREN          reduce using rule 27 (binary_expression -> expression LOGICAL_OP_OR expression .)
    PLUS_OP         shift and go to state 33
    MINUS_OP        shift and go to state 34
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36
    LESS_OP         shift and go to state 37
    GREATER_OP      shift and go to state 38
    LESS_EQUAL_OP   shift and go to state 39
    GREATER_EQUAL_OP shift and go to state 40
    EQUAL_OP        shift and go to state 41
    DIFFERENT_OP    shift and go to state 42
    LOGICAL_OP_AND  shift and go to state 43

  ! PLUS_OP         [ reduce using rule 27 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! MINUS_OP        [ reduce using rule 27 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! MUL_OP          [ reduce using rule 27 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! DIV_OP          [ reduce using rule 27 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! LESS_OP         [ reduce using rule 27 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! GREATER_OP      [ reduce using rule 27 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 27 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 27 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! EQUAL_OP        [ reduce using rule 27 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! DIFFERENT_OP    [ reduce using rule 27 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! LOGICAL_OP_AND  [ reduce using rule 27 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! LOGICAL_OP_OR   [ shift and go to state 44 ]


state 66

    (10) assignment -> VARIABLE ASSIGNMENT_OP expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 10 (assignment -> VARIABLE ASSIGNMENT_OP expression .)
    PLUS_OP         shift and go to state 33
    MINUS_OP        shift and go to state 34
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36
    LESS_OP         shift and go to state 37
    GREATER_OP      shift and go to state 38
    LESS_EQUAL_OP   shift and go to state 39
    GREATER_EQUAL_OP shift and go to state 40
    EQUAL_OP        shift and go to state 41
    DIFFERENT_OP    shift and go to state 42
    LOGICAL_OP_AND  shift and go to state 43
    LOGICAL_OP_OR   shift and go to state 44


state 67

    (11) declaration -> type VARIABLE ASSIGNMENT_OP . expression
    (13) expression -> . binary_expression
    (14) expression -> . unitary_expression
    (15) expression -> . primary_expression
    (16) binary_expression -> . expression PLUS_OP expression
    (17) binary_expression -> . expression MINUS_OP expression
    (18) binary_expression -> . expression MUL_OP expression
    (19) binary_expression -> . expression DIV_OP expression
    (20) binary_expression -> . expression LESS_OP expression
    (21) binary_expression -> . expression GREATER_OP expression
    (22) binary_expression -> . expression LESS_EQUAL_OP expression
    (23) binary_expression -> . expression GREATER_EQUAL_OP expression
    (24) binary_expression -> . expression EQUAL_OP expression
    (25) binary_expression -> . expression DIFFERENT_OP expression
    (26) binary_expression -> . expression LOGICAL_OP_AND expression
    (27) binary_expression -> . expression LOGICAL_OP_OR expression
    (28) unitary_expression -> . MINUS_OP expression
    (29) unitary_expression -> . LOGICAL_OP_NOT expression
    (30) primary_expression -> . VARIABLE
    (31) primary_expression -> . NUMBER_INTEGER
    (32) primary_expression -> . NUMBER_FLOAT
    (33) primary_expression -> . TRUE
    (34) primary_expression -> . FALSE
    (35) primary_expression -> . NULL
    (36) primary_expression -> . TEXT_CHAR
    (37) primary_expression -> . TEXT_STRING

    MINUS_OP        shift and go to state 17
    LOGICAL_OP_NOT  shift and go to state 18
    VARIABLE        shift and go to state 52
    NUMBER_INTEGER  shift and go to state 19
    NUMBER_FLOAT    shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    NULL            shift and go to state 23
    TEXT_CHAR       shift and go to state 24
    TEXT_STRING     shift and go to state 25

    expression                     shift and go to state 69
    binary_expression              shift and go to state 10
    unitary_expression             shift and go to state 11
    primary_expression             shift and go to state 12

state 68

    (38) print_statement -> PRINT_DECLARATION LPAREN expression . RPAREN
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    RPAREN          shift and go to state 70
    PLUS_OP         shift and go to state 33
    MINUS_OP        shift and go to state 34
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36
    LESS_OP         shift and go to state 37
    GREATER_OP      shift and go to state 38
    LESS_EQUAL_OP   shift and go to state 39
    GREATER_EQUAL_OP shift and go to state 40
    EQUAL_OP        shift and go to state 41
    DIFFERENT_OP    shift and go to state 42
    LOGICAL_OP_AND  shift and go to state 43
    LOGICAL_OP_OR   shift and go to state 44


state 69

    (11) declaration -> type VARIABLE ASSIGNMENT_OP expression .
    (16) binary_expression -> expression . PLUS_OP expression
    (17) binary_expression -> expression . MINUS_OP expression
    (18) binary_expression -> expression . MUL_OP expression
    (19) binary_expression -> expression . DIV_OP expression
    (20) binary_expression -> expression . LESS_OP expression
    (21) binary_expression -> expression . GREATER_OP expression
    (22) binary_expression -> expression . LESS_EQUAL_OP expression
    (23) binary_expression -> expression . GREATER_EQUAL_OP expression
    (24) binary_expression -> expression . EQUAL_OP expression
    (25) binary_expression -> expression . DIFFERENT_OP expression
    (26) binary_expression -> expression . LOGICAL_OP_AND expression
    (27) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 11 (declaration -> type VARIABLE ASSIGNMENT_OP expression .)
    PLUS_OP         shift and go to state 33
    MINUS_OP        shift and go to state 34
    MUL_OP          shift and go to state 35
    DIV_OP          shift and go to state 36
    LESS_OP         shift and go to state 37
    GREATER_OP      shift and go to state 38
    LESS_EQUAL_OP   shift and go to state 39
    GREATER_EQUAL_OP shift and go to state 40
    EQUAL_OP        shift and go to state 41
    DIFFERENT_OP    shift and go to state 42
    LOGICAL_OP_AND  shift and go to state 43
    LOGICAL_OP_OR   shift and go to state 44


state 70

    (38) print_statement -> PRINT_DECLARATION LPAREN expression RPAREN .

    END_LINE        reduce using rule 38 (print_statement -> PRINT_DECLARATION LPAREN expression RPAREN .)

