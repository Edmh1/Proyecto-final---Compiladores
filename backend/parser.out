Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> expression END_LINE
Rule 5     statement -> assignment END_LINE
Rule 6     statement -> declaration END_LINE
Rule 7     statement -> conditional END_LINE
Rule 8     statement -> loop END_LINE
Rule 9     statement -> return_statement END_LINE
Rule 10    statement -> break_statement END_LINE
Rule 11    statement -> function_declaration END_LINE
Rule 12    statement -> function_call END_LINE
Rule 13    statement -> print_statement END_LINE
Rule 14    statement -> comment
Rule 15    function_declaration -> type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
Rule 16    function_declaration -> FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
Rule 17    parameter_list -> parameter_list SEPARATION parameter
Rule 18    parameter_list -> parameter
Rule 19    parameter_list -> empty
Rule 20    parameter -> type VARIABLE
Rule 21    function_call -> VARIABLE LPAREN argument_list RPAREN
Rule 22    argument_list -> argument_list SEPARATION expression
Rule 23    argument_list -> expression
Rule 24    argument_list -> empty
Rule 25    print_statement -> PRINT_DECLARATION LPAREN expression RPAREN
Rule 26    expression -> binary_expression
Rule 27    expression -> unitary_expression
Rule 28    expression -> primary_expression
Rule 29    binary_expression -> expression PLUS_OP expression
Rule 30    binary_expression -> expression MINUS_OP expression
Rule 31    binary_expression -> expression MUL_OP expression
Rule 32    binary_expression -> expression DIV_OP expression
Rule 33    binary_expression -> expression LESS_OP expression
Rule 34    binary_expression -> expression GREATER_OP expression
Rule 35    binary_expression -> expression LESS_EQUAL_OP expression
Rule 36    binary_expression -> expression GREATER_EQUAL_OP expression
Rule 37    binary_expression -> expression EQUAL_OP expression
Rule 38    binary_expression -> expression DIFFERENT_OP expression
Rule 39    binary_expression -> expression LOGICAL_OP_AND expression
Rule 40    binary_expression -> expression LOGICAL_OP_OR expression
Rule 41    unitary_expression -> MINUS_OP expression
Rule 42    unitary_expression -> LOGICAL_OP_NOT expression
Rule 43    primary_expression -> VARIABLE
Rule 44    primary_expression -> NUMBER_INTEGER
Rule 45    primary_expression -> NUMBER_FLOAT
Rule 46    primary_expression -> TRUE
Rule 47    primary_expression -> FALSE
Rule 48    primary_expression -> TEXT_CHAR
Rule 49    primary_expression -> TEXT_STRING
Rule 50    primary_expression -> function_call
Rule 51    assignment -> VARIABLE ASSIGNMENT_OP expression
Rule 52    declaration -> type VARIABLE ASSIGNMENT_OP expression
Rule 53    declaration -> type VARIABLE
Rule 54    conditional -> CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
Rule 55    conditional -> CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
Rule 56    loop -> LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
Rule 57    loop -> LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
Rule 58    return_statement -> RETURN expression
Rule 59    return_statement -> RETURN
Rule 60    break_statement -> BREAK
Rule 61    comment -> COMMENT
Rule 62    type -> TYPE_INTEGER
Rule 63    type -> TYPE_FLOAT
Rule 64    type -> TYPE_BOOLEAN
Rule 65    type -> TYPE_CHAR
Rule 66    type -> TYPE_STRING
Rule 67    type -> NULL
Rule 68    empty -> <empty>

Terminals, with rules where they appear

ASSIGNMENT_OP        : 51 52
BREAK                : 60
COMMENT              : 61
CONDITIONAL1         : 54 55
CONDITIONAL2         : 55
DIFFERENT_OP         : 38
DIV_OP               : 32
END_LINE             : 4 5 6 7 8 9 10 11 12 13 15 16
EQUAL_OP             : 37
FALSE                : 47
FUNCTION_DECLARATION : 15 16
GREATER_EQUAL_OP     : 36
GREATER_OP           : 34
LESS_EQUAL_OP        : 35
LESS_OP              : 33
LOGICAL_OP_AND       : 39
LOGICAL_OP_NOT       : 42
LOGICAL_OP_OR        : 40
LOOP1                : 56
LOOP2                : 57
LPAREN               : 15 16 21 25 54 55 56 57
MINUS_OP             : 30 41
MUL_OP               : 31
NULL                 : 67
NUMBER_FLOAT         : 45
NUMBER_INTEGER       : 44
PLUS_OP              : 29
PRINT_DECLARATION    : 25
RETURN               : 58 59
RPAREN               : 15 16 21 25 54 55 56 57
SEPARATION           : 17 22 57 57
STRUCTURE_BODY       : 15 16 54 55 55 56 57
TEXT_CHAR            : 48
TEXT_STRING          : 49
TRUE                 : 46
TYPE_BOOLEAN         : 64
TYPE_CHAR            : 65
TYPE_FLOAT           : 63
TYPE_INTEGER         : 62
TYPE_STRING          : 66
VARIABLE             : 20 21 43 51 52 53
error                : 

Nonterminals, with rules where they appear

argument_list        : 21 22
assignment           : 5 57 57
binary_expression    : 26
break_statement      : 10
comment              : 14
conditional          : 7
declaration          : 6
empty                : 19 24
expression           : 4 22 23 25 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 42 51 52 54 55 56 57 58
function_call        : 12 50
function_declaration : 11
loop                 : 8
parameter            : 17 18
parameter_list       : 15 16 17
primary_expression   : 28
print_statement      : 13
program              : 0
return_statement     : 9
statement            : 2 3
statement_list       : 1 2 15 16 54 55 55 56 57
type                 : 15 20 52 53
unitary_expression   : 27

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . conditional END_LINE
    (8) statement -> . loop END_LINE
    (9) statement -> . return_statement END_LINE
    (10) statement -> . break_statement END_LINE
    (11) statement -> . function_declaration END_LINE
    (12) statement -> . function_call END_LINE
    (13) statement -> . print_statement END_LINE
    (14) statement -> . comment
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (52) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (53) declaration -> . type VARIABLE
    (54) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (56) loop -> . LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (57) loop -> . LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (60) break_statement -> . BREAK
    (15) function_declaration -> . type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (16) function_declaration -> . FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN
    (25) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (61) comment -> . COMMENT
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    VARIABLE        shift and go to state 18
    CONDITIONAL1    shift and go to state 20
    LOOP1           shift and go to state 21
    LOOP2           shift and go to state 22
    RETURN          shift and go to state 23
    BREAK           shift and go to state 24
    FUNCTION_DECLARATION shift and go to state 25
    PRINT_DECLARATION shift and go to state 26
    COMMENT         shift and go to state 27
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    assignment                     shift and go to state 5
    declaration                    shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    function_declaration           shift and go to state 11
    function_call                  shift and go to state 12
    print_statement                shift and go to state 13
    comment                        shift and go to state 14
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    type                           shift and go to state 19

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . conditional END_LINE
    (8) statement -> . loop END_LINE
    (9) statement -> . return_statement END_LINE
    (10) statement -> . break_statement END_LINE
    (11) statement -> . function_declaration END_LINE
    (12) statement -> . function_call END_LINE
    (13) statement -> . print_statement END_LINE
    (14) statement -> . comment
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (52) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (53) declaration -> . type VARIABLE
    (54) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (56) loop -> . LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (57) loop -> . LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (60) break_statement -> . BREAK
    (15) function_declaration -> . type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (16) function_declaration -> . FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN
    (25) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (61) comment -> . COMMENT
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    $end            reduce using rule 1 (program -> statement_list .)
    VARIABLE        shift and go to state 18
    CONDITIONAL1    shift and go to state 20
    LOOP1           shift and go to state 21
    LOOP2           shift and go to state 22
    RETURN          shift and go to state 23
    BREAK           shift and go to state 24
    FUNCTION_DECLARATION shift and go to state 25
    PRINT_DECLARATION shift and go to state 26
    COMMENT         shift and go to state 27
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    statement                      shift and go to state 42
    expression                     shift and go to state 4
    assignment                     shift and go to state 5
    declaration                    shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    function_declaration           shift and go to state 11
    function_call                  shift and go to state 12
    print_statement                shift and go to state 13
    comment                        shift and go to state 14
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    type                           shift and go to state 19

state 3

    (3) statement_list -> statement .

    VARIABLE        reduce using rule 3 (statement_list -> statement .)
    CONDITIONAL1    reduce using rule 3 (statement_list -> statement .)
    LOOP1           reduce using rule 3 (statement_list -> statement .)
    LOOP2           reduce using rule 3 (statement_list -> statement .)
    RETURN          reduce using rule 3 (statement_list -> statement .)
    BREAK           reduce using rule 3 (statement_list -> statement .)
    FUNCTION_DECLARATION reduce using rule 3 (statement_list -> statement .)
    PRINT_DECLARATION reduce using rule 3 (statement_list -> statement .)
    COMMENT         reduce using rule 3 (statement_list -> statement .)
    MINUS_OP        reduce using rule 3 (statement_list -> statement .)
    LOGICAL_OP_NOT  reduce using rule 3 (statement_list -> statement .)
    NUMBER_INTEGER  reduce using rule 3 (statement_list -> statement .)
    NUMBER_FLOAT    reduce using rule 3 (statement_list -> statement .)
    TRUE            reduce using rule 3 (statement_list -> statement .)
    FALSE           reduce using rule 3 (statement_list -> statement .)
    TEXT_CHAR       reduce using rule 3 (statement_list -> statement .)
    TEXT_STRING     reduce using rule 3 (statement_list -> statement .)
    TYPE_INTEGER    reduce using rule 3 (statement_list -> statement .)
    TYPE_FLOAT      reduce using rule 3 (statement_list -> statement .)
    TYPE_BOOLEAN    reduce using rule 3 (statement_list -> statement .)
    TYPE_CHAR       reduce using rule 3 (statement_list -> statement .)
    TYPE_STRING     reduce using rule 3 (statement_list -> statement .)
    NULL            reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    CONDITIONAL2    reduce using rule 3 (statement_list -> statement .)
    END_LINE        reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> expression . END_LINE
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        shift and go to state 43
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47
    LESS_OP         shift and go to state 48
    GREATER_OP      shift and go to state 49
    LESS_EQUAL_OP   shift and go to state 50
    GREATER_EQUAL_OP shift and go to state 51
    EQUAL_OP        shift and go to state 52
    DIFFERENT_OP    shift and go to state 53
    LOGICAL_OP_AND  shift and go to state 54
    LOGICAL_OP_OR   shift and go to state 55


state 5

    (5) statement -> assignment . END_LINE

    END_LINE        shift and go to state 56


state 6

    (6) statement -> declaration . END_LINE

    END_LINE        shift and go to state 57


state 7

    (7) statement -> conditional . END_LINE

    END_LINE        shift and go to state 58


state 8

    (8) statement -> loop . END_LINE

    END_LINE        shift and go to state 59


state 9

    (9) statement -> return_statement . END_LINE

    END_LINE        shift and go to state 60


state 10

    (10) statement -> break_statement . END_LINE

    END_LINE        shift and go to state 61


state 11

    (11) statement -> function_declaration . END_LINE

    END_LINE        shift and go to state 62


state 12

    (12) statement -> function_call . END_LINE
    (50) primary_expression -> function_call .

  ! shift/reduce conflict for END_LINE resolved as shift
    END_LINE        shift and go to state 63
    PLUS_OP         reduce using rule 50 (primary_expression -> function_call .)
    MINUS_OP        reduce using rule 50 (primary_expression -> function_call .)
    MUL_OP          reduce using rule 50 (primary_expression -> function_call .)
    DIV_OP          reduce using rule 50 (primary_expression -> function_call .)
    LESS_OP         reduce using rule 50 (primary_expression -> function_call .)
    GREATER_OP      reduce using rule 50 (primary_expression -> function_call .)
    LESS_EQUAL_OP   reduce using rule 50 (primary_expression -> function_call .)
    GREATER_EQUAL_OP reduce using rule 50 (primary_expression -> function_call .)
    EQUAL_OP        reduce using rule 50 (primary_expression -> function_call .)
    DIFFERENT_OP    reduce using rule 50 (primary_expression -> function_call .)
    LOGICAL_OP_AND  reduce using rule 50 (primary_expression -> function_call .)
    LOGICAL_OP_OR   reduce using rule 50 (primary_expression -> function_call .)

  ! END_LINE        [ reduce using rule 50 (primary_expression -> function_call .) ]


state 13

    (13) statement -> print_statement . END_LINE

    END_LINE        shift and go to state 64


state 14

    (14) statement -> comment .

    VARIABLE        reduce using rule 14 (statement -> comment .)
    CONDITIONAL1    reduce using rule 14 (statement -> comment .)
    LOOP1           reduce using rule 14 (statement -> comment .)
    LOOP2           reduce using rule 14 (statement -> comment .)
    RETURN          reduce using rule 14 (statement -> comment .)
    BREAK           reduce using rule 14 (statement -> comment .)
    FUNCTION_DECLARATION reduce using rule 14 (statement -> comment .)
    PRINT_DECLARATION reduce using rule 14 (statement -> comment .)
    COMMENT         reduce using rule 14 (statement -> comment .)
    MINUS_OP        reduce using rule 14 (statement -> comment .)
    LOGICAL_OP_NOT  reduce using rule 14 (statement -> comment .)
    NUMBER_INTEGER  reduce using rule 14 (statement -> comment .)
    NUMBER_FLOAT    reduce using rule 14 (statement -> comment .)
    TRUE            reduce using rule 14 (statement -> comment .)
    FALSE           reduce using rule 14 (statement -> comment .)
    TEXT_CHAR       reduce using rule 14 (statement -> comment .)
    TEXT_STRING     reduce using rule 14 (statement -> comment .)
    TYPE_INTEGER    reduce using rule 14 (statement -> comment .)
    TYPE_FLOAT      reduce using rule 14 (statement -> comment .)
    TYPE_BOOLEAN    reduce using rule 14 (statement -> comment .)
    TYPE_CHAR       reduce using rule 14 (statement -> comment .)
    TYPE_STRING     reduce using rule 14 (statement -> comment .)
    NULL            reduce using rule 14 (statement -> comment .)
    $end            reduce using rule 14 (statement -> comment .)
    CONDITIONAL2    reduce using rule 14 (statement -> comment .)
    END_LINE        reduce using rule 14 (statement -> comment .)


state 15

    (26) expression -> binary_expression .

    END_LINE        reduce using rule 26 (expression -> binary_expression .)
    PLUS_OP         reduce using rule 26 (expression -> binary_expression .)
    MINUS_OP        reduce using rule 26 (expression -> binary_expression .)
    MUL_OP          reduce using rule 26 (expression -> binary_expression .)
    DIV_OP          reduce using rule 26 (expression -> binary_expression .)
    LESS_OP         reduce using rule 26 (expression -> binary_expression .)
    GREATER_OP      reduce using rule 26 (expression -> binary_expression .)
    LESS_EQUAL_OP   reduce using rule 26 (expression -> binary_expression .)
    GREATER_EQUAL_OP reduce using rule 26 (expression -> binary_expression .)
    EQUAL_OP        reduce using rule 26 (expression -> binary_expression .)
    DIFFERENT_OP    reduce using rule 26 (expression -> binary_expression .)
    LOGICAL_OP_AND  reduce using rule 26 (expression -> binary_expression .)
    LOGICAL_OP_OR   reduce using rule 26 (expression -> binary_expression .)
    SEPARATION      reduce using rule 26 (expression -> binary_expression .)
    RPAREN          reduce using rule 26 (expression -> binary_expression .)


state 16

    (27) expression -> unitary_expression .

    END_LINE        reduce using rule 27 (expression -> unitary_expression .)
    PLUS_OP         reduce using rule 27 (expression -> unitary_expression .)
    MINUS_OP        reduce using rule 27 (expression -> unitary_expression .)
    MUL_OP          reduce using rule 27 (expression -> unitary_expression .)
    DIV_OP          reduce using rule 27 (expression -> unitary_expression .)
    LESS_OP         reduce using rule 27 (expression -> unitary_expression .)
    GREATER_OP      reduce using rule 27 (expression -> unitary_expression .)
    LESS_EQUAL_OP   reduce using rule 27 (expression -> unitary_expression .)
    GREATER_EQUAL_OP reduce using rule 27 (expression -> unitary_expression .)
    EQUAL_OP        reduce using rule 27 (expression -> unitary_expression .)
    DIFFERENT_OP    reduce using rule 27 (expression -> unitary_expression .)
    LOGICAL_OP_AND  reduce using rule 27 (expression -> unitary_expression .)
    LOGICAL_OP_OR   reduce using rule 27 (expression -> unitary_expression .)
    SEPARATION      reduce using rule 27 (expression -> unitary_expression .)
    RPAREN          reduce using rule 27 (expression -> unitary_expression .)


state 17

    (28) expression -> primary_expression .

    END_LINE        reduce using rule 28 (expression -> primary_expression .)
    PLUS_OP         reduce using rule 28 (expression -> primary_expression .)
    MINUS_OP        reduce using rule 28 (expression -> primary_expression .)
    MUL_OP          reduce using rule 28 (expression -> primary_expression .)
    DIV_OP          reduce using rule 28 (expression -> primary_expression .)
    LESS_OP         reduce using rule 28 (expression -> primary_expression .)
    GREATER_OP      reduce using rule 28 (expression -> primary_expression .)
    LESS_EQUAL_OP   reduce using rule 28 (expression -> primary_expression .)
    GREATER_EQUAL_OP reduce using rule 28 (expression -> primary_expression .)
    EQUAL_OP        reduce using rule 28 (expression -> primary_expression .)
    DIFFERENT_OP    reduce using rule 28 (expression -> primary_expression .)
    LOGICAL_OP_AND  reduce using rule 28 (expression -> primary_expression .)
    LOGICAL_OP_OR   reduce using rule 28 (expression -> primary_expression .)
    SEPARATION      reduce using rule 28 (expression -> primary_expression .)
    RPAREN          reduce using rule 28 (expression -> primary_expression .)


state 18

    (51) assignment -> VARIABLE . ASSIGNMENT_OP expression
    (21) function_call -> VARIABLE . LPAREN argument_list RPAREN
    (43) primary_expression -> VARIABLE .

    ASSIGNMENT_OP   shift and go to state 65
    LPAREN          shift and go to state 66
    END_LINE        reduce using rule 43 (primary_expression -> VARIABLE .)
    PLUS_OP         reduce using rule 43 (primary_expression -> VARIABLE .)
    MINUS_OP        reduce using rule 43 (primary_expression -> VARIABLE .)
    MUL_OP          reduce using rule 43 (primary_expression -> VARIABLE .)
    DIV_OP          reduce using rule 43 (primary_expression -> VARIABLE .)
    LESS_OP         reduce using rule 43 (primary_expression -> VARIABLE .)
    GREATER_OP      reduce using rule 43 (primary_expression -> VARIABLE .)
    LESS_EQUAL_OP   reduce using rule 43 (primary_expression -> VARIABLE .)
    GREATER_EQUAL_OP reduce using rule 43 (primary_expression -> VARIABLE .)
    EQUAL_OP        reduce using rule 43 (primary_expression -> VARIABLE .)
    DIFFERENT_OP    reduce using rule 43 (primary_expression -> VARIABLE .)
    LOGICAL_OP_AND  reduce using rule 43 (primary_expression -> VARIABLE .)
    LOGICAL_OP_OR   reduce using rule 43 (primary_expression -> VARIABLE .)


state 19

    (52) declaration -> type . VARIABLE ASSIGNMENT_OP expression
    (53) declaration -> type . VARIABLE
    (15) function_declaration -> type . FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE

    VARIABLE        shift and go to state 67
    FUNCTION_DECLARATION shift and go to state 68


state 20

    (54) conditional -> CONDITIONAL1 . LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> CONDITIONAL1 . LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list

    LPAREN          shift and go to state 69


state 21

    (56) loop -> LOOP1 . LPAREN expression RPAREN STRUCTURE_BODY statement_list

    LPAREN          shift and go to state 70


state 22

    (57) loop -> LOOP2 . LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list

    LPAREN          shift and go to state 71


state 23

    (58) return_statement -> RETURN . expression
    (59) return_statement -> RETURN .
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    END_LINE        reduce using rule 59 (return_statement -> RETURN .)
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 72
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 24

    (60) break_statement -> BREAK .

    END_LINE        reduce using rule 60 (break_statement -> BREAK .)


state 25

    (16) function_declaration -> FUNCTION_DECLARATION . LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE

    LPAREN          shift and go to state 75


state 26

    (25) print_statement -> PRINT_DECLARATION . LPAREN expression RPAREN

    LPAREN          shift and go to state 76


state 27

    (61) comment -> COMMENT .

    VARIABLE        reduce using rule 61 (comment -> COMMENT .)
    CONDITIONAL1    reduce using rule 61 (comment -> COMMENT .)
    LOOP1           reduce using rule 61 (comment -> COMMENT .)
    LOOP2           reduce using rule 61 (comment -> COMMENT .)
    RETURN          reduce using rule 61 (comment -> COMMENT .)
    BREAK           reduce using rule 61 (comment -> COMMENT .)
    FUNCTION_DECLARATION reduce using rule 61 (comment -> COMMENT .)
    PRINT_DECLARATION reduce using rule 61 (comment -> COMMENT .)
    COMMENT         reduce using rule 61 (comment -> COMMENT .)
    MINUS_OP        reduce using rule 61 (comment -> COMMENT .)
    LOGICAL_OP_NOT  reduce using rule 61 (comment -> COMMENT .)
    NUMBER_INTEGER  reduce using rule 61 (comment -> COMMENT .)
    NUMBER_FLOAT    reduce using rule 61 (comment -> COMMENT .)
    TRUE            reduce using rule 61 (comment -> COMMENT .)
    FALSE           reduce using rule 61 (comment -> COMMENT .)
    TEXT_CHAR       reduce using rule 61 (comment -> COMMENT .)
    TEXT_STRING     reduce using rule 61 (comment -> COMMENT .)
    TYPE_INTEGER    reduce using rule 61 (comment -> COMMENT .)
    TYPE_FLOAT      reduce using rule 61 (comment -> COMMENT .)
    TYPE_BOOLEAN    reduce using rule 61 (comment -> COMMENT .)
    TYPE_CHAR       reduce using rule 61 (comment -> COMMENT .)
    TYPE_STRING     reduce using rule 61 (comment -> COMMENT .)
    NULL            reduce using rule 61 (comment -> COMMENT .)
    $end            reduce using rule 61 (comment -> COMMENT .)
    CONDITIONAL2    reduce using rule 61 (comment -> COMMENT .)
    END_LINE        reduce using rule 61 (comment -> COMMENT .)


state 28

    (41) unitary_expression -> MINUS_OP . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 77
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 29

    (42) unitary_expression -> LOGICAL_OP_NOT . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 78
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 30

    (44) primary_expression -> NUMBER_INTEGER .

    END_LINE        reduce using rule 44 (primary_expression -> NUMBER_INTEGER .)
    PLUS_OP         reduce using rule 44 (primary_expression -> NUMBER_INTEGER .)
    MINUS_OP        reduce using rule 44 (primary_expression -> NUMBER_INTEGER .)
    MUL_OP          reduce using rule 44 (primary_expression -> NUMBER_INTEGER .)
    DIV_OP          reduce using rule 44 (primary_expression -> NUMBER_INTEGER .)
    LESS_OP         reduce using rule 44 (primary_expression -> NUMBER_INTEGER .)
    GREATER_OP      reduce using rule 44 (primary_expression -> NUMBER_INTEGER .)
    LESS_EQUAL_OP   reduce using rule 44 (primary_expression -> NUMBER_INTEGER .)
    GREATER_EQUAL_OP reduce using rule 44 (primary_expression -> NUMBER_INTEGER .)
    EQUAL_OP        reduce using rule 44 (primary_expression -> NUMBER_INTEGER .)
    DIFFERENT_OP    reduce using rule 44 (primary_expression -> NUMBER_INTEGER .)
    LOGICAL_OP_AND  reduce using rule 44 (primary_expression -> NUMBER_INTEGER .)
    LOGICAL_OP_OR   reduce using rule 44 (primary_expression -> NUMBER_INTEGER .)
    SEPARATION      reduce using rule 44 (primary_expression -> NUMBER_INTEGER .)
    RPAREN          reduce using rule 44 (primary_expression -> NUMBER_INTEGER .)


state 31

    (45) primary_expression -> NUMBER_FLOAT .

    END_LINE        reduce using rule 45 (primary_expression -> NUMBER_FLOAT .)
    PLUS_OP         reduce using rule 45 (primary_expression -> NUMBER_FLOAT .)
    MINUS_OP        reduce using rule 45 (primary_expression -> NUMBER_FLOAT .)
    MUL_OP          reduce using rule 45 (primary_expression -> NUMBER_FLOAT .)
    DIV_OP          reduce using rule 45 (primary_expression -> NUMBER_FLOAT .)
    LESS_OP         reduce using rule 45 (primary_expression -> NUMBER_FLOAT .)
    GREATER_OP      reduce using rule 45 (primary_expression -> NUMBER_FLOAT .)
    LESS_EQUAL_OP   reduce using rule 45 (primary_expression -> NUMBER_FLOAT .)
    GREATER_EQUAL_OP reduce using rule 45 (primary_expression -> NUMBER_FLOAT .)
    EQUAL_OP        reduce using rule 45 (primary_expression -> NUMBER_FLOAT .)
    DIFFERENT_OP    reduce using rule 45 (primary_expression -> NUMBER_FLOAT .)
    LOGICAL_OP_AND  reduce using rule 45 (primary_expression -> NUMBER_FLOAT .)
    LOGICAL_OP_OR   reduce using rule 45 (primary_expression -> NUMBER_FLOAT .)
    SEPARATION      reduce using rule 45 (primary_expression -> NUMBER_FLOAT .)
    RPAREN          reduce using rule 45 (primary_expression -> NUMBER_FLOAT .)


state 32

    (46) primary_expression -> TRUE .

    END_LINE        reduce using rule 46 (primary_expression -> TRUE .)
    PLUS_OP         reduce using rule 46 (primary_expression -> TRUE .)
    MINUS_OP        reduce using rule 46 (primary_expression -> TRUE .)
    MUL_OP          reduce using rule 46 (primary_expression -> TRUE .)
    DIV_OP          reduce using rule 46 (primary_expression -> TRUE .)
    LESS_OP         reduce using rule 46 (primary_expression -> TRUE .)
    GREATER_OP      reduce using rule 46 (primary_expression -> TRUE .)
    LESS_EQUAL_OP   reduce using rule 46 (primary_expression -> TRUE .)
    GREATER_EQUAL_OP reduce using rule 46 (primary_expression -> TRUE .)
    EQUAL_OP        reduce using rule 46 (primary_expression -> TRUE .)
    DIFFERENT_OP    reduce using rule 46 (primary_expression -> TRUE .)
    LOGICAL_OP_AND  reduce using rule 46 (primary_expression -> TRUE .)
    LOGICAL_OP_OR   reduce using rule 46 (primary_expression -> TRUE .)
    SEPARATION      reduce using rule 46 (primary_expression -> TRUE .)
    RPAREN          reduce using rule 46 (primary_expression -> TRUE .)


state 33

    (47) primary_expression -> FALSE .

    END_LINE        reduce using rule 47 (primary_expression -> FALSE .)
    PLUS_OP         reduce using rule 47 (primary_expression -> FALSE .)
    MINUS_OP        reduce using rule 47 (primary_expression -> FALSE .)
    MUL_OP          reduce using rule 47 (primary_expression -> FALSE .)
    DIV_OP          reduce using rule 47 (primary_expression -> FALSE .)
    LESS_OP         reduce using rule 47 (primary_expression -> FALSE .)
    GREATER_OP      reduce using rule 47 (primary_expression -> FALSE .)
    LESS_EQUAL_OP   reduce using rule 47 (primary_expression -> FALSE .)
    GREATER_EQUAL_OP reduce using rule 47 (primary_expression -> FALSE .)
    EQUAL_OP        reduce using rule 47 (primary_expression -> FALSE .)
    DIFFERENT_OP    reduce using rule 47 (primary_expression -> FALSE .)
    LOGICAL_OP_AND  reduce using rule 47 (primary_expression -> FALSE .)
    LOGICAL_OP_OR   reduce using rule 47 (primary_expression -> FALSE .)
    SEPARATION      reduce using rule 47 (primary_expression -> FALSE .)
    RPAREN          reduce using rule 47 (primary_expression -> FALSE .)


state 34

    (48) primary_expression -> TEXT_CHAR .

    END_LINE        reduce using rule 48 (primary_expression -> TEXT_CHAR .)
    PLUS_OP         reduce using rule 48 (primary_expression -> TEXT_CHAR .)
    MINUS_OP        reduce using rule 48 (primary_expression -> TEXT_CHAR .)
    MUL_OP          reduce using rule 48 (primary_expression -> TEXT_CHAR .)
    DIV_OP          reduce using rule 48 (primary_expression -> TEXT_CHAR .)
    LESS_OP         reduce using rule 48 (primary_expression -> TEXT_CHAR .)
    GREATER_OP      reduce using rule 48 (primary_expression -> TEXT_CHAR .)
    LESS_EQUAL_OP   reduce using rule 48 (primary_expression -> TEXT_CHAR .)
    GREATER_EQUAL_OP reduce using rule 48 (primary_expression -> TEXT_CHAR .)
    EQUAL_OP        reduce using rule 48 (primary_expression -> TEXT_CHAR .)
    DIFFERENT_OP    reduce using rule 48 (primary_expression -> TEXT_CHAR .)
    LOGICAL_OP_AND  reduce using rule 48 (primary_expression -> TEXT_CHAR .)
    LOGICAL_OP_OR   reduce using rule 48 (primary_expression -> TEXT_CHAR .)
    SEPARATION      reduce using rule 48 (primary_expression -> TEXT_CHAR .)
    RPAREN          reduce using rule 48 (primary_expression -> TEXT_CHAR .)


state 35

    (49) primary_expression -> TEXT_STRING .

    END_LINE        reduce using rule 49 (primary_expression -> TEXT_STRING .)
    PLUS_OP         reduce using rule 49 (primary_expression -> TEXT_STRING .)
    MINUS_OP        reduce using rule 49 (primary_expression -> TEXT_STRING .)
    MUL_OP          reduce using rule 49 (primary_expression -> TEXT_STRING .)
    DIV_OP          reduce using rule 49 (primary_expression -> TEXT_STRING .)
    LESS_OP         reduce using rule 49 (primary_expression -> TEXT_STRING .)
    GREATER_OP      reduce using rule 49 (primary_expression -> TEXT_STRING .)
    LESS_EQUAL_OP   reduce using rule 49 (primary_expression -> TEXT_STRING .)
    GREATER_EQUAL_OP reduce using rule 49 (primary_expression -> TEXT_STRING .)
    EQUAL_OP        reduce using rule 49 (primary_expression -> TEXT_STRING .)
    DIFFERENT_OP    reduce using rule 49 (primary_expression -> TEXT_STRING .)
    LOGICAL_OP_AND  reduce using rule 49 (primary_expression -> TEXT_STRING .)
    LOGICAL_OP_OR   reduce using rule 49 (primary_expression -> TEXT_STRING .)
    SEPARATION      reduce using rule 49 (primary_expression -> TEXT_STRING .)
    RPAREN          reduce using rule 49 (primary_expression -> TEXT_STRING .)


state 36

    (62) type -> TYPE_INTEGER .

    VARIABLE        reduce using rule 62 (type -> TYPE_INTEGER .)
    FUNCTION_DECLARATION reduce using rule 62 (type -> TYPE_INTEGER .)


state 37

    (63) type -> TYPE_FLOAT .

    VARIABLE        reduce using rule 63 (type -> TYPE_FLOAT .)
    FUNCTION_DECLARATION reduce using rule 63 (type -> TYPE_FLOAT .)


state 38

    (64) type -> TYPE_BOOLEAN .

    VARIABLE        reduce using rule 64 (type -> TYPE_BOOLEAN .)
    FUNCTION_DECLARATION reduce using rule 64 (type -> TYPE_BOOLEAN .)


state 39

    (65) type -> TYPE_CHAR .

    VARIABLE        reduce using rule 65 (type -> TYPE_CHAR .)
    FUNCTION_DECLARATION reduce using rule 65 (type -> TYPE_CHAR .)


state 40

    (66) type -> TYPE_STRING .

    VARIABLE        reduce using rule 66 (type -> TYPE_STRING .)
    FUNCTION_DECLARATION reduce using rule 66 (type -> TYPE_STRING .)


state 41

    (67) type -> NULL .

    VARIABLE        reduce using rule 67 (type -> NULL .)
    FUNCTION_DECLARATION reduce using rule 67 (type -> NULL .)


state 42

    (2) statement_list -> statement_list statement .

    VARIABLE        reduce using rule 2 (statement_list -> statement_list statement .)
    CONDITIONAL1    reduce using rule 2 (statement_list -> statement_list statement .)
    LOOP1           reduce using rule 2 (statement_list -> statement_list statement .)
    LOOP2           reduce using rule 2 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 2 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 2 (statement_list -> statement_list statement .)
    FUNCTION_DECLARATION reduce using rule 2 (statement_list -> statement_list statement .)
    PRINT_DECLARATION reduce using rule 2 (statement_list -> statement_list statement .)
    COMMENT         reduce using rule 2 (statement_list -> statement_list statement .)
    MINUS_OP        reduce using rule 2 (statement_list -> statement_list statement .)
    LOGICAL_OP_NOT  reduce using rule 2 (statement_list -> statement_list statement .)
    NUMBER_INTEGER  reduce using rule 2 (statement_list -> statement_list statement .)
    NUMBER_FLOAT    reduce using rule 2 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 2 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 2 (statement_list -> statement_list statement .)
    TEXT_CHAR       reduce using rule 2 (statement_list -> statement_list statement .)
    TEXT_STRING     reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE_INTEGER    reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE_FLOAT      reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE_BOOLEAN    reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE_CHAR       reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE_STRING     reduce using rule 2 (statement_list -> statement_list statement .)
    NULL            reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    CONDITIONAL2    reduce using rule 2 (statement_list -> statement_list statement .)
    END_LINE        reduce using rule 2 (statement_list -> statement_list statement .)


state 43

    (4) statement -> expression END_LINE .

    VARIABLE        reduce using rule 4 (statement -> expression END_LINE .)
    CONDITIONAL1    reduce using rule 4 (statement -> expression END_LINE .)
    LOOP1           reduce using rule 4 (statement -> expression END_LINE .)
    LOOP2           reduce using rule 4 (statement -> expression END_LINE .)
    RETURN          reduce using rule 4 (statement -> expression END_LINE .)
    BREAK           reduce using rule 4 (statement -> expression END_LINE .)
    FUNCTION_DECLARATION reduce using rule 4 (statement -> expression END_LINE .)
    PRINT_DECLARATION reduce using rule 4 (statement -> expression END_LINE .)
    COMMENT         reduce using rule 4 (statement -> expression END_LINE .)
    MINUS_OP        reduce using rule 4 (statement -> expression END_LINE .)
    LOGICAL_OP_NOT  reduce using rule 4 (statement -> expression END_LINE .)
    NUMBER_INTEGER  reduce using rule 4 (statement -> expression END_LINE .)
    NUMBER_FLOAT    reduce using rule 4 (statement -> expression END_LINE .)
    TRUE            reduce using rule 4 (statement -> expression END_LINE .)
    FALSE           reduce using rule 4 (statement -> expression END_LINE .)
    TEXT_CHAR       reduce using rule 4 (statement -> expression END_LINE .)
    TEXT_STRING     reduce using rule 4 (statement -> expression END_LINE .)
    TYPE_INTEGER    reduce using rule 4 (statement -> expression END_LINE .)
    TYPE_FLOAT      reduce using rule 4 (statement -> expression END_LINE .)
    TYPE_BOOLEAN    reduce using rule 4 (statement -> expression END_LINE .)
    TYPE_CHAR       reduce using rule 4 (statement -> expression END_LINE .)
    TYPE_STRING     reduce using rule 4 (statement -> expression END_LINE .)
    NULL            reduce using rule 4 (statement -> expression END_LINE .)
    $end            reduce using rule 4 (statement -> expression END_LINE .)
    CONDITIONAL2    reduce using rule 4 (statement -> expression END_LINE .)
    END_LINE        reduce using rule 4 (statement -> expression END_LINE .)


state 44

    (29) binary_expression -> expression PLUS_OP . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 79
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 45

    (30) binary_expression -> expression MINUS_OP . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 80
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 46

    (31) binary_expression -> expression MUL_OP . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 81
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 47

    (32) binary_expression -> expression DIV_OP . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 82
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 48

    (33) binary_expression -> expression LESS_OP . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 83
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 49

    (34) binary_expression -> expression GREATER_OP . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 84
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 50

    (35) binary_expression -> expression LESS_EQUAL_OP . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 85
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 51

    (36) binary_expression -> expression GREATER_EQUAL_OP . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 86
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 52

    (37) binary_expression -> expression EQUAL_OP . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 87
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 53

    (38) binary_expression -> expression DIFFERENT_OP . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 88
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 54

    (39) binary_expression -> expression LOGICAL_OP_AND . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 89
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 55

    (40) binary_expression -> expression LOGICAL_OP_OR . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 90
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 56

    (5) statement -> assignment END_LINE .

    VARIABLE        reduce using rule 5 (statement -> assignment END_LINE .)
    CONDITIONAL1    reduce using rule 5 (statement -> assignment END_LINE .)
    LOOP1           reduce using rule 5 (statement -> assignment END_LINE .)
    LOOP2           reduce using rule 5 (statement -> assignment END_LINE .)
    RETURN          reduce using rule 5 (statement -> assignment END_LINE .)
    BREAK           reduce using rule 5 (statement -> assignment END_LINE .)
    FUNCTION_DECLARATION reduce using rule 5 (statement -> assignment END_LINE .)
    PRINT_DECLARATION reduce using rule 5 (statement -> assignment END_LINE .)
    COMMENT         reduce using rule 5 (statement -> assignment END_LINE .)
    MINUS_OP        reduce using rule 5 (statement -> assignment END_LINE .)
    LOGICAL_OP_NOT  reduce using rule 5 (statement -> assignment END_LINE .)
    NUMBER_INTEGER  reduce using rule 5 (statement -> assignment END_LINE .)
    NUMBER_FLOAT    reduce using rule 5 (statement -> assignment END_LINE .)
    TRUE            reduce using rule 5 (statement -> assignment END_LINE .)
    FALSE           reduce using rule 5 (statement -> assignment END_LINE .)
    TEXT_CHAR       reduce using rule 5 (statement -> assignment END_LINE .)
    TEXT_STRING     reduce using rule 5 (statement -> assignment END_LINE .)
    TYPE_INTEGER    reduce using rule 5 (statement -> assignment END_LINE .)
    TYPE_FLOAT      reduce using rule 5 (statement -> assignment END_LINE .)
    TYPE_BOOLEAN    reduce using rule 5 (statement -> assignment END_LINE .)
    TYPE_CHAR       reduce using rule 5 (statement -> assignment END_LINE .)
    TYPE_STRING     reduce using rule 5 (statement -> assignment END_LINE .)
    NULL            reduce using rule 5 (statement -> assignment END_LINE .)
    $end            reduce using rule 5 (statement -> assignment END_LINE .)
    CONDITIONAL2    reduce using rule 5 (statement -> assignment END_LINE .)
    END_LINE        reduce using rule 5 (statement -> assignment END_LINE .)


state 57

    (6) statement -> declaration END_LINE .

    VARIABLE        reduce using rule 6 (statement -> declaration END_LINE .)
    CONDITIONAL1    reduce using rule 6 (statement -> declaration END_LINE .)
    LOOP1           reduce using rule 6 (statement -> declaration END_LINE .)
    LOOP2           reduce using rule 6 (statement -> declaration END_LINE .)
    RETURN          reduce using rule 6 (statement -> declaration END_LINE .)
    BREAK           reduce using rule 6 (statement -> declaration END_LINE .)
    FUNCTION_DECLARATION reduce using rule 6 (statement -> declaration END_LINE .)
    PRINT_DECLARATION reduce using rule 6 (statement -> declaration END_LINE .)
    COMMENT         reduce using rule 6 (statement -> declaration END_LINE .)
    MINUS_OP        reduce using rule 6 (statement -> declaration END_LINE .)
    LOGICAL_OP_NOT  reduce using rule 6 (statement -> declaration END_LINE .)
    NUMBER_INTEGER  reduce using rule 6 (statement -> declaration END_LINE .)
    NUMBER_FLOAT    reduce using rule 6 (statement -> declaration END_LINE .)
    TRUE            reduce using rule 6 (statement -> declaration END_LINE .)
    FALSE           reduce using rule 6 (statement -> declaration END_LINE .)
    TEXT_CHAR       reduce using rule 6 (statement -> declaration END_LINE .)
    TEXT_STRING     reduce using rule 6 (statement -> declaration END_LINE .)
    TYPE_INTEGER    reduce using rule 6 (statement -> declaration END_LINE .)
    TYPE_FLOAT      reduce using rule 6 (statement -> declaration END_LINE .)
    TYPE_BOOLEAN    reduce using rule 6 (statement -> declaration END_LINE .)
    TYPE_CHAR       reduce using rule 6 (statement -> declaration END_LINE .)
    TYPE_STRING     reduce using rule 6 (statement -> declaration END_LINE .)
    NULL            reduce using rule 6 (statement -> declaration END_LINE .)
    $end            reduce using rule 6 (statement -> declaration END_LINE .)
    CONDITIONAL2    reduce using rule 6 (statement -> declaration END_LINE .)
    END_LINE        reduce using rule 6 (statement -> declaration END_LINE .)


state 58

    (7) statement -> conditional END_LINE .

    VARIABLE        reduce using rule 7 (statement -> conditional END_LINE .)
    CONDITIONAL1    reduce using rule 7 (statement -> conditional END_LINE .)
    LOOP1           reduce using rule 7 (statement -> conditional END_LINE .)
    LOOP2           reduce using rule 7 (statement -> conditional END_LINE .)
    RETURN          reduce using rule 7 (statement -> conditional END_LINE .)
    BREAK           reduce using rule 7 (statement -> conditional END_LINE .)
    FUNCTION_DECLARATION reduce using rule 7 (statement -> conditional END_LINE .)
    PRINT_DECLARATION reduce using rule 7 (statement -> conditional END_LINE .)
    COMMENT         reduce using rule 7 (statement -> conditional END_LINE .)
    MINUS_OP        reduce using rule 7 (statement -> conditional END_LINE .)
    LOGICAL_OP_NOT  reduce using rule 7 (statement -> conditional END_LINE .)
    NUMBER_INTEGER  reduce using rule 7 (statement -> conditional END_LINE .)
    NUMBER_FLOAT    reduce using rule 7 (statement -> conditional END_LINE .)
    TRUE            reduce using rule 7 (statement -> conditional END_LINE .)
    FALSE           reduce using rule 7 (statement -> conditional END_LINE .)
    TEXT_CHAR       reduce using rule 7 (statement -> conditional END_LINE .)
    TEXT_STRING     reduce using rule 7 (statement -> conditional END_LINE .)
    TYPE_INTEGER    reduce using rule 7 (statement -> conditional END_LINE .)
    TYPE_FLOAT      reduce using rule 7 (statement -> conditional END_LINE .)
    TYPE_BOOLEAN    reduce using rule 7 (statement -> conditional END_LINE .)
    TYPE_CHAR       reduce using rule 7 (statement -> conditional END_LINE .)
    TYPE_STRING     reduce using rule 7 (statement -> conditional END_LINE .)
    NULL            reduce using rule 7 (statement -> conditional END_LINE .)
    $end            reduce using rule 7 (statement -> conditional END_LINE .)
    CONDITIONAL2    reduce using rule 7 (statement -> conditional END_LINE .)
    END_LINE        reduce using rule 7 (statement -> conditional END_LINE .)


state 59

    (8) statement -> loop END_LINE .

    VARIABLE        reduce using rule 8 (statement -> loop END_LINE .)
    CONDITIONAL1    reduce using rule 8 (statement -> loop END_LINE .)
    LOOP1           reduce using rule 8 (statement -> loop END_LINE .)
    LOOP2           reduce using rule 8 (statement -> loop END_LINE .)
    RETURN          reduce using rule 8 (statement -> loop END_LINE .)
    BREAK           reduce using rule 8 (statement -> loop END_LINE .)
    FUNCTION_DECLARATION reduce using rule 8 (statement -> loop END_LINE .)
    PRINT_DECLARATION reduce using rule 8 (statement -> loop END_LINE .)
    COMMENT         reduce using rule 8 (statement -> loop END_LINE .)
    MINUS_OP        reduce using rule 8 (statement -> loop END_LINE .)
    LOGICAL_OP_NOT  reduce using rule 8 (statement -> loop END_LINE .)
    NUMBER_INTEGER  reduce using rule 8 (statement -> loop END_LINE .)
    NUMBER_FLOAT    reduce using rule 8 (statement -> loop END_LINE .)
    TRUE            reduce using rule 8 (statement -> loop END_LINE .)
    FALSE           reduce using rule 8 (statement -> loop END_LINE .)
    TEXT_CHAR       reduce using rule 8 (statement -> loop END_LINE .)
    TEXT_STRING     reduce using rule 8 (statement -> loop END_LINE .)
    TYPE_INTEGER    reduce using rule 8 (statement -> loop END_LINE .)
    TYPE_FLOAT      reduce using rule 8 (statement -> loop END_LINE .)
    TYPE_BOOLEAN    reduce using rule 8 (statement -> loop END_LINE .)
    TYPE_CHAR       reduce using rule 8 (statement -> loop END_LINE .)
    TYPE_STRING     reduce using rule 8 (statement -> loop END_LINE .)
    NULL            reduce using rule 8 (statement -> loop END_LINE .)
    $end            reduce using rule 8 (statement -> loop END_LINE .)
    CONDITIONAL2    reduce using rule 8 (statement -> loop END_LINE .)
    END_LINE        reduce using rule 8 (statement -> loop END_LINE .)


state 60

    (9) statement -> return_statement END_LINE .

    VARIABLE        reduce using rule 9 (statement -> return_statement END_LINE .)
    CONDITIONAL1    reduce using rule 9 (statement -> return_statement END_LINE .)
    LOOP1           reduce using rule 9 (statement -> return_statement END_LINE .)
    LOOP2           reduce using rule 9 (statement -> return_statement END_LINE .)
    RETURN          reduce using rule 9 (statement -> return_statement END_LINE .)
    BREAK           reduce using rule 9 (statement -> return_statement END_LINE .)
    FUNCTION_DECLARATION reduce using rule 9 (statement -> return_statement END_LINE .)
    PRINT_DECLARATION reduce using rule 9 (statement -> return_statement END_LINE .)
    COMMENT         reduce using rule 9 (statement -> return_statement END_LINE .)
    MINUS_OP        reduce using rule 9 (statement -> return_statement END_LINE .)
    LOGICAL_OP_NOT  reduce using rule 9 (statement -> return_statement END_LINE .)
    NUMBER_INTEGER  reduce using rule 9 (statement -> return_statement END_LINE .)
    NUMBER_FLOAT    reduce using rule 9 (statement -> return_statement END_LINE .)
    TRUE            reduce using rule 9 (statement -> return_statement END_LINE .)
    FALSE           reduce using rule 9 (statement -> return_statement END_LINE .)
    TEXT_CHAR       reduce using rule 9 (statement -> return_statement END_LINE .)
    TEXT_STRING     reduce using rule 9 (statement -> return_statement END_LINE .)
    TYPE_INTEGER    reduce using rule 9 (statement -> return_statement END_LINE .)
    TYPE_FLOAT      reduce using rule 9 (statement -> return_statement END_LINE .)
    TYPE_BOOLEAN    reduce using rule 9 (statement -> return_statement END_LINE .)
    TYPE_CHAR       reduce using rule 9 (statement -> return_statement END_LINE .)
    TYPE_STRING     reduce using rule 9 (statement -> return_statement END_LINE .)
    NULL            reduce using rule 9 (statement -> return_statement END_LINE .)
    $end            reduce using rule 9 (statement -> return_statement END_LINE .)
    CONDITIONAL2    reduce using rule 9 (statement -> return_statement END_LINE .)
    END_LINE        reduce using rule 9 (statement -> return_statement END_LINE .)


state 61

    (10) statement -> break_statement END_LINE .

    VARIABLE        reduce using rule 10 (statement -> break_statement END_LINE .)
    CONDITIONAL1    reduce using rule 10 (statement -> break_statement END_LINE .)
    LOOP1           reduce using rule 10 (statement -> break_statement END_LINE .)
    LOOP2           reduce using rule 10 (statement -> break_statement END_LINE .)
    RETURN          reduce using rule 10 (statement -> break_statement END_LINE .)
    BREAK           reduce using rule 10 (statement -> break_statement END_LINE .)
    FUNCTION_DECLARATION reduce using rule 10 (statement -> break_statement END_LINE .)
    PRINT_DECLARATION reduce using rule 10 (statement -> break_statement END_LINE .)
    COMMENT         reduce using rule 10 (statement -> break_statement END_LINE .)
    MINUS_OP        reduce using rule 10 (statement -> break_statement END_LINE .)
    LOGICAL_OP_NOT  reduce using rule 10 (statement -> break_statement END_LINE .)
    NUMBER_INTEGER  reduce using rule 10 (statement -> break_statement END_LINE .)
    NUMBER_FLOAT    reduce using rule 10 (statement -> break_statement END_LINE .)
    TRUE            reduce using rule 10 (statement -> break_statement END_LINE .)
    FALSE           reduce using rule 10 (statement -> break_statement END_LINE .)
    TEXT_CHAR       reduce using rule 10 (statement -> break_statement END_LINE .)
    TEXT_STRING     reduce using rule 10 (statement -> break_statement END_LINE .)
    TYPE_INTEGER    reduce using rule 10 (statement -> break_statement END_LINE .)
    TYPE_FLOAT      reduce using rule 10 (statement -> break_statement END_LINE .)
    TYPE_BOOLEAN    reduce using rule 10 (statement -> break_statement END_LINE .)
    TYPE_CHAR       reduce using rule 10 (statement -> break_statement END_LINE .)
    TYPE_STRING     reduce using rule 10 (statement -> break_statement END_LINE .)
    NULL            reduce using rule 10 (statement -> break_statement END_LINE .)
    $end            reduce using rule 10 (statement -> break_statement END_LINE .)
    CONDITIONAL2    reduce using rule 10 (statement -> break_statement END_LINE .)
    END_LINE        reduce using rule 10 (statement -> break_statement END_LINE .)


state 62

    (11) statement -> function_declaration END_LINE .

    VARIABLE        reduce using rule 11 (statement -> function_declaration END_LINE .)
    CONDITIONAL1    reduce using rule 11 (statement -> function_declaration END_LINE .)
    LOOP1           reduce using rule 11 (statement -> function_declaration END_LINE .)
    LOOP2           reduce using rule 11 (statement -> function_declaration END_LINE .)
    RETURN          reduce using rule 11 (statement -> function_declaration END_LINE .)
    BREAK           reduce using rule 11 (statement -> function_declaration END_LINE .)
    FUNCTION_DECLARATION reduce using rule 11 (statement -> function_declaration END_LINE .)
    PRINT_DECLARATION reduce using rule 11 (statement -> function_declaration END_LINE .)
    COMMENT         reduce using rule 11 (statement -> function_declaration END_LINE .)
    MINUS_OP        reduce using rule 11 (statement -> function_declaration END_LINE .)
    LOGICAL_OP_NOT  reduce using rule 11 (statement -> function_declaration END_LINE .)
    NUMBER_INTEGER  reduce using rule 11 (statement -> function_declaration END_LINE .)
    NUMBER_FLOAT    reduce using rule 11 (statement -> function_declaration END_LINE .)
    TRUE            reduce using rule 11 (statement -> function_declaration END_LINE .)
    FALSE           reduce using rule 11 (statement -> function_declaration END_LINE .)
    TEXT_CHAR       reduce using rule 11 (statement -> function_declaration END_LINE .)
    TEXT_STRING     reduce using rule 11 (statement -> function_declaration END_LINE .)
    TYPE_INTEGER    reduce using rule 11 (statement -> function_declaration END_LINE .)
    TYPE_FLOAT      reduce using rule 11 (statement -> function_declaration END_LINE .)
    TYPE_BOOLEAN    reduce using rule 11 (statement -> function_declaration END_LINE .)
    TYPE_CHAR       reduce using rule 11 (statement -> function_declaration END_LINE .)
    TYPE_STRING     reduce using rule 11 (statement -> function_declaration END_LINE .)
    NULL            reduce using rule 11 (statement -> function_declaration END_LINE .)
    $end            reduce using rule 11 (statement -> function_declaration END_LINE .)
    CONDITIONAL2    reduce using rule 11 (statement -> function_declaration END_LINE .)
    END_LINE        reduce using rule 11 (statement -> function_declaration END_LINE .)


state 63

    (12) statement -> function_call END_LINE .

    VARIABLE        reduce using rule 12 (statement -> function_call END_LINE .)
    CONDITIONAL1    reduce using rule 12 (statement -> function_call END_LINE .)
    LOOP1           reduce using rule 12 (statement -> function_call END_LINE .)
    LOOP2           reduce using rule 12 (statement -> function_call END_LINE .)
    RETURN          reduce using rule 12 (statement -> function_call END_LINE .)
    BREAK           reduce using rule 12 (statement -> function_call END_LINE .)
    FUNCTION_DECLARATION reduce using rule 12 (statement -> function_call END_LINE .)
    PRINT_DECLARATION reduce using rule 12 (statement -> function_call END_LINE .)
    COMMENT         reduce using rule 12 (statement -> function_call END_LINE .)
    MINUS_OP        reduce using rule 12 (statement -> function_call END_LINE .)
    LOGICAL_OP_NOT  reduce using rule 12 (statement -> function_call END_LINE .)
    NUMBER_INTEGER  reduce using rule 12 (statement -> function_call END_LINE .)
    NUMBER_FLOAT    reduce using rule 12 (statement -> function_call END_LINE .)
    TRUE            reduce using rule 12 (statement -> function_call END_LINE .)
    FALSE           reduce using rule 12 (statement -> function_call END_LINE .)
    TEXT_CHAR       reduce using rule 12 (statement -> function_call END_LINE .)
    TEXT_STRING     reduce using rule 12 (statement -> function_call END_LINE .)
    TYPE_INTEGER    reduce using rule 12 (statement -> function_call END_LINE .)
    TYPE_FLOAT      reduce using rule 12 (statement -> function_call END_LINE .)
    TYPE_BOOLEAN    reduce using rule 12 (statement -> function_call END_LINE .)
    TYPE_CHAR       reduce using rule 12 (statement -> function_call END_LINE .)
    TYPE_STRING     reduce using rule 12 (statement -> function_call END_LINE .)
    NULL            reduce using rule 12 (statement -> function_call END_LINE .)
    $end            reduce using rule 12 (statement -> function_call END_LINE .)
    CONDITIONAL2    reduce using rule 12 (statement -> function_call END_LINE .)
    END_LINE        reduce using rule 12 (statement -> function_call END_LINE .)


state 64

    (13) statement -> print_statement END_LINE .

    VARIABLE        reduce using rule 13 (statement -> print_statement END_LINE .)
    CONDITIONAL1    reduce using rule 13 (statement -> print_statement END_LINE .)
    LOOP1           reduce using rule 13 (statement -> print_statement END_LINE .)
    LOOP2           reduce using rule 13 (statement -> print_statement END_LINE .)
    RETURN          reduce using rule 13 (statement -> print_statement END_LINE .)
    BREAK           reduce using rule 13 (statement -> print_statement END_LINE .)
    FUNCTION_DECLARATION reduce using rule 13 (statement -> print_statement END_LINE .)
    PRINT_DECLARATION reduce using rule 13 (statement -> print_statement END_LINE .)
    COMMENT         reduce using rule 13 (statement -> print_statement END_LINE .)
    MINUS_OP        reduce using rule 13 (statement -> print_statement END_LINE .)
    LOGICAL_OP_NOT  reduce using rule 13 (statement -> print_statement END_LINE .)
    NUMBER_INTEGER  reduce using rule 13 (statement -> print_statement END_LINE .)
    NUMBER_FLOAT    reduce using rule 13 (statement -> print_statement END_LINE .)
    TRUE            reduce using rule 13 (statement -> print_statement END_LINE .)
    FALSE           reduce using rule 13 (statement -> print_statement END_LINE .)
    TEXT_CHAR       reduce using rule 13 (statement -> print_statement END_LINE .)
    TEXT_STRING     reduce using rule 13 (statement -> print_statement END_LINE .)
    TYPE_INTEGER    reduce using rule 13 (statement -> print_statement END_LINE .)
    TYPE_FLOAT      reduce using rule 13 (statement -> print_statement END_LINE .)
    TYPE_BOOLEAN    reduce using rule 13 (statement -> print_statement END_LINE .)
    TYPE_CHAR       reduce using rule 13 (statement -> print_statement END_LINE .)
    TYPE_STRING     reduce using rule 13 (statement -> print_statement END_LINE .)
    NULL            reduce using rule 13 (statement -> print_statement END_LINE .)
    $end            reduce using rule 13 (statement -> print_statement END_LINE .)
    CONDITIONAL2    reduce using rule 13 (statement -> print_statement END_LINE .)
    END_LINE        reduce using rule 13 (statement -> print_statement END_LINE .)


state 65

    (51) assignment -> VARIABLE ASSIGNMENT_OP . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 91
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 66

    (21) function_call -> VARIABLE LPAREN . argument_list RPAREN
    (22) argument_list -> . argument_list SEPARATION expression
    (23) argument_list -> . expression
    (24) argument_list -> . empty
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (68) empty -> .
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    RPAREN          reduce using rule 68 (empty -> .)
    SEPARATION      reduce using rule 68 (empty -> .)
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    argument_list                  shift and go to state 92
    expression                     shift and go to state 93
    empty                          shift and go to state 94
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 67

    (52) declaration -> type VARIABLE . ASSIGNMENT_OP expression
    (53) declaration -> type VARIABLE .

    ASSIGNMENT_OP   shift and go to state 95
    END_LINE        reduce using rule 53 (declaration -> type VARIABLE .)


state 68

    (15) function_declaration -> type FUNCTION_DECLARATION . LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE

    LPAREN          shift and go to state 96


state 69

    (54) conditional -> CONDITIONAL1 LPAREN . expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> CONDITIONAL1 LPAREN . expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 97
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 70

    (56) loop -> LOOP1 LPAREN . expression RPAREN STRUCTURE_BODY statement_list
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 98
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 71

    (57) loop -> LOOP2 LPAREN . assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression

    VARIABLE        shift and go to state 100

    assignment                     shift and go to state 99

state 72

    (58) return_statement -> RETURN expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 58 (return_statement -> RETURN expression .)
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47
    LESS_OP         shift and go to state 48
    GREATER_OP      shift and go to state 49
    LESS_EQUAL_OP   shift and go to state 50
    GREATER_EQUAL_OP shift and go to state 51
    EQUAL_OP        shift and go to state 52
    DIFFERENT_OP    shift and go to state 53
    LOGICAL_OP_AND  shift and go to state 54
    LOGICAL_OP_OR   shift and go to state 55


state 73

    (43) primary_expression -> VARIABLE .
    (21) function_call -> VARIABLE . LPAREN argument_list RPAREN

    PLUS_OP         reduce using rule 43 (primary_expression -> VARIABLE .)
    MINUS_OP        reduce using rule 43 (primary_expression -> VARIABLE .)
    MUL_OP          reduce using rule 43 (primary_expression -> VARIABLE .)
    DIV_OP          reduce using rule 43 (primary_expression -> VARIABLE .)
    LESS_OP         reduce using rule 43 (primary_expression -> VARIABLE .)
    GREATER_OP      reduce using rule 43 (primary_expression -> VARIABLE .)
    LESS_EQUAL_OP   reduce using rule 43 (primary_expression -> VARIABLE .)
    GREATER_EQUAL_OP reduce using rule 43 (primary_expression -> VARIABLE .)
    EQUAL_OP        reduce using rule 43 (primary_expression -> VARIABLE .)
    DIFFERENT_OP    reduce using rule 43 (primary_expression -> VARIABLE .)
    LOGICAL_OP_AND  reduce using rule 43 (primary_expression -> VARIABLE .)
    LOGICAL_OP_OR   reduce using rule 43 (primary_expression -> VARIABLE .)
    END_LINE        reduce using rule 43 (primary_expression -> VARIABLE .)
    SEPARATION      reduce using rule 43 (primary_expression -> VARIABLE .)
    RPAREN          reduce using rule 43 (primary_expression -> VARIABLE .)
    LPAREN          shift and go to state 66


state 74

    (50) primary_expression -> function_call .

    PLUS_OP         reduce using rule 50 (primary_expression -> function_call .)
    MINUS_OP        reduce using rule 50 (primary_expression -> function_call .)
    MUL_OP          reduce using rule 50 (primary_expression -> function_call .)
    DIV_OP          reduce using rule 50 (primary_expression -> function_call .)
    LESS_OP         reduce using rule 50 (primary_expression -> function_call .)
    GREATER_OP      reduce using rule 50 (primary_expression -> function_call .)
    LESS_EQUAL_OP   reduce using rule 50 (primary_expression -> function_call .)
    GREATER_EQUAL_OP reduce using rule 50 (primary_expression -> function_call .)
    EQUAL_OP        reduce using rule 50 (primary_expression -> function_call .)
    DIFFERENT_OP    reduce using rule 50 (primary_expression -> function_call .)
    LOGICAL_OP_AND  reduce using rule 50 (primary_expression -> function_call .)
    LOGICAL_OP_OR   reduce using rule 50 (primary_expression -> function_call .)
    END_LINE        reduce using rule 50 (primary_expression -> function_call .)
    SEPARATION      reduce using rule 50 (primary_expression -> function_call .)
    RPAREN          reduce using rule 50 (primary_expression -> function_call .)


state 75

    (16) function_declaration -> FUNCTION_DECLARATION LPAREN . parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (17) parameter_list -> . parameter_list SEPARATION parameter
    (18) parameter_list -> . parameter
    (19) parameter_list -> . empty
    (20) parameter -> . type VARIABLE
    (68) empty -> .
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    RPAREN          reduce using rule 68 (empty -> .)
    SEPARATION      reduce using rule 68 (empty -> .)
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    parameter_list                 shift and go to state 101
    parameter                      shift and go to state 102
    empty                          shift and go to state 103
    type                           shift and go to state 104

state 76

    (25) print_statement -> PRINT_DECLARATION LPAREN . expression RPAREN
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 105
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 77

    (41) unitary_expression -> MINUS_OP expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 41 (unitary_expression -> MINUS_OP expression .)
    PLUS_OP         reduce using rule 41 (unitary_expression -> MINUS_OP expression .)
    MINUS_OP        reduce using rule 41 (unitary_expression -> MINUS_OP expression .)
    LESS_OP         reduce using rule 41 (unitary_expression -> MINUS_OP expression .)
    GREATER_OP      reduce using rule 41 (unitary_expression -> MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 41 (unitary_expression -> MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 41 (unitary_expression -> MINUS_OP expression .)
    EQUAL_OP        reduce using rule 41 (unitary_expression -> MINUS_OP expression .)
    DIFFERENT_OP    reduce using rule 41 (unitary_expression -> MINUS_OP expression .)
    LOGICAL_OP_AND  reduce using rule 41 (unitary_expression -> MINUS_OP expression .)
    LOGICAL_OP_OR   reduce using rule 41 (unitary_expression -> MINUS_OP expression .)
    SEPARATION      reduce using rule 41 (unitary_expression -> MINUS_OP expression .)
    RPAREN          reduce using rule 41 (unitary_expression -> MINUS_OP expression .)
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47

  ! MUL_OP          [ reduce using rule 41 (unitary_expression -> MINUS_OP expression .) ]
  ! DIV_OP          [ reduce using rule 41 (unitary_expression -> MINUS_OP expression .) ]
  ! PLUS_OP         [ shift and go to state 44 ]
  ! MINUS_OP        [ shift and go to state 45 ]
  ! LESS_OP         [ shift and go to state 48 ]
  ! GREATER_OP      [ shift and go to state 49 ]
  ! LESS_EQUAL_OP   [ shift and go to state 50 ]
  ! GREATER_EQUAL_OP [ shift and go to state 51 ]
  ! EQUAL_OP        [ shift and go to state 52 ]
  ! DIFFERENT_OP    [ shift and go to state 53 ]
  ! LOGICAL_OP_AND  [ shift and go to state 54 ]
  ! LOGICAL_OP_OR   [ shift and go to state 55 ]


state 78

    (42) unitary_expression -> LOGICAL_OP_NOT expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 42 (unitary_expression -> LOGICAL_OP_NOT expression .)
    LOGICAL_OP_AND  reduce using rule 42 (unitary_expression -> LOGICAL_OP_NOT expression .)
    LOGICAL_OP_OR   reduce using rule 42 (unitary_expression -> LOGICAL_OP_NOT expression .)
    SEPARATION      reduce using rule 42 (unitary_expression -> LOGICAL_OP_NOT expression .)
    RPAREN          reduce using rule 42 (unitary_expression -> LOGICAL_OP_NOT expression .)
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47
    LESS_OP         shift and go to state 48
    GREATER_OP      shift and go to state 49
    LESS_EQUAL_OP   shift and go to state 50
    GREATER_EQUAL_OP shift and go to state 51
    EQUAL_OP        shift and go to state 52
    DIFFERENT_OP    shift and go to state 53

  ! PLUS_OP         [ reduce using rule 42 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! MINUS_OP        [ reduce using rule 42 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! MUL_OP          [ reduce using rule 42 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! DIV_OP          [ reduce using rule 42 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! LESS_OP         [ reduce using rule 42 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! GREATER_OP      [ reduce using rule 42 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 42 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 42 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! EQUAL_OP        [ reduce using rule 42 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! DIFFERENT_OP    [ reduce using rule 42 (unitary_expression -> LOGICAL_OP_NOT expression .) ]
  ! LOGICAL_OP_AND  [ shift and go to state 54 ]
  ! LOGICAL_OP_OR   [ shift and go to state 55 ]


state 79

    (29) binary_expression -> expression PLUS_OP expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 29 (binary_expression -> expression PLUS_OP expression .)
    PLUS_OP         reduce using rule 29 (binary_expression -> expression PLUS_OP expression .)
    MINUS_OP        reduce using rule 29 (binary_expression -> expression PLUS_OP expression .)
    LESS_OP         reduce using rule 29 (binary_expression -> expression PLUS_OP expression .)
    GREATER_OP      reduce using rule 29 (binary_expression -> expression PLUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 29 (binary_expression -> expression PLUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 29 (binary_expression -> expression PLUS_OP expression .)
    EQUAL_OP        reduce using rule 29 (binary_expression -> expression PLUS_OP expression .)
    DIFFERENT_OP    reduce using rule 29 (binary_expression -> expression PLUS_OP expression .)
    LOGICAL_OP_AND  reduce using rule 29 (binary_expression -> expression PLUS_OP expression .)
    LOGICAL_OP_OR   reduce using rule 29 (binary_expression -> expression PLUS_OP expression .)
    SEPARATION      reduce using rule 29 (binary_expression -> expression PLUS_OP expression .)
    RPAREN          reduce using rule 29 (binary_expression -> expression PLUS_OP expression .)
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47

  ! MUL_OP          [ reduce using rule 29 (binary_expression -> expression PLUS_OP expression .) ]
  ! DIV_OP          [ reduce using rule 29 (binary_expression -> expression PLUS_OP expression .) ]
  ! PLUS_OP         [ shift and go to state 44 ]
  ! MINUS_OP        [ shift and go to state 45 ]
  ! LESS_OP         [ shift and go to state 48 ]
  ! GREATER_OP      [ shift and go to state 49 ]
  ! LESS_EQUAL_OP   [ shift and go to state 50 ]
  ! GREATER_EQUAL_OP [ shift and go to state 51 ]
  ! EQUAL_OP        [ shift and go to state 52 ]
  ! DIFFERENT_OP    [ shift and go to state 53 ]
  ! LOGICAL_OP_AND  [ shift and go to state 54 ]
  ! LOGICAL_OP_OR   [ shift and go to state 55 ]


state 80

    (30) binary_expression -> expression MINUS_OP expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 30 (binary_expression -> expression MINUS_OP expression .)
    PLUS_OP         reduce using rule 30 (binary_expression -> expression MINUS_OP expression .)
    MINUS_OP        reduce using rule 30 (binary_expression -> expression MINUS_OP expression .)
    LESS_OP         reduce using rule 30 (binary_expression -> expression MINUS_OP expression .)
    GREATER_OP      reduce using rule 30 (binary_expression -> expression MINUS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 30 (binary_expression -> expression MINUS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 30 (binary_expression -> expression MINUS_OP expression .)
    EQUAL_OP        reduce using rule 30 (binary_expression -> expression MINUS_OP expression .)
    DIFFERENT_OP    reduce using rule 30 (binary_expression -> expression MINUS_OP expression .)
    LOGICAL_OP_AND  reduce using rule 30 (binary_expression -> expression MINUS_OP expression .)
    LOGICAL_OP_OR   reduce using rule 30 (binary_expression -> expression MINUS_OP expression .)
    SEPARATION      reduce using rule 30 (binary_expression -> expression MINUS_OP expression .)
    RPAREN          reduce using rule 30 (binary_expression -> expression MINUS_OP expression .)
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47

  ! MUL_OP          [ reduce using rule 30 (binary_expression -> expression MINUS_OP expression .) ]
  ! DIV_OP          [ reduce using rule 30 (binary_expression -> expression MINUS_OP expression .) ]
  ! PLUS_OP         [ shift and go to state 44 ]
  ! MINUS_OP        [ shift and go to state 45 ]
  ! LESS_OP         [ shift and go to state 48 ]
  ! GREATER_OP      [ shift and go to state 49 ]
  ! LESS_EQUAL_OP   [ shift and go to state 50 ]
  ! GREATER_EQUAL_OP [ shift and go to state 51 ]
  ! EQUAL_OP        [ shift and go to state 52 ]
  ! DIFFERENT_OP    [ shift and go to state 53 ]
  ! LOGICAL_OP_AND  [ shift and go to state 54 ]
  ! LOGICAL_OP_OR   [ shift and go to state 55 ]


state 81

    (31) binary_expression -> expression MUL_OP expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 31 (binary_expression -> expression MUL_OP expression .)
    PLUS_OP         reduce using rule 31 (binary_expression -> expression MUL_OP expression .)
    MINUS_OP        reduce using rule 31 (binary_expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 31 (binary_expression -> expression MUL_OP expression .)
    DIV_OP          reduce using rule 31 (binary_expression -> expression MUL_OP expression .)
    LESS_OP         reduce using rule 31 (binary_expression -> expression MUL_OP expression .)
    GREATER_OP      reduce using rule 31 (binary_expression -> expression MUL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 31 (binary_expression -> expression MUL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 31 (binary_expression -> expression MUL_OP expression .)
    EQUAL_OP        reduce using rule 31 (binary_expression -> expression MUL_OP expression .)
    DIFFERENT_OP    reduce using rule 31 (binary_expression -> expression MUL_OP expression .)
    LOGICAL_OP_AND  reduce using rule 31 (binary_expression -> expression MUL_OP expression .)
    LOGICAL_OP_OR   reduce using rule 31 (binary_expression -> expression MUL_OP expression .)
    SEPARATION      reduce using rule 31 (binary_expression -> expression MUL_OP expression .)
    RPAREN          reduce using rule 31 (binary_expression -> expression MUL_OP expression .)

  ! PLUS_OP         [ shift and go to state 44 ]
  ! MINUS_OP        [ shift and go to state 45 ]
  ! MUL_OP          [ shift and go to state 46 ]
  ! DIV_OP          [ shift and go to state 47 ]
  ! LESS_OP         [ shift and go to state 48 ]
  ! GREATER_OP      [ shift and go to state 49 ]
  ! LESS_EQUAL_OP   [ shift and go to state 50 ]
  ! GREATER_EQUAL_OP [ shift and go to state 51 ]
  ! EQUAL_OP        [ shift and go to state 52 ]
  ! DIFFERENT_OP    [ shift and go to state 53 ]
  ! LOGICAL_OP_AND  [ shift and go to state 54 ]
  ! LOGICAL_OP_OR   [ shift and go to state 55 ]


state 82

    (32) binary_expression -> expression DIV_OP expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 32 (binary_expression -> expression DIV_OP expression .)
    PLUS_OP         reduce using rule 32 (binary_expression -> expression DIV_OP expression .)
    MINUS_OP        reduce using rule 32 (binary_expression -> expression DIV_OP expression .)
    MUL_OP          reduce using rule 32 (binary_expression -> expression DIV_OP expression .)
    DIV_OP          reduce using rule 32 (binary_expression -> expression DIV_OP expression .)
    LESS_OP         reduce using rule 32 (binary_expression -> expression DIV_OP expression .)
    GREATER_OP      reduce using rule 32 (binary_expression -> expression DIV_OP expression .)
    LESS_EQUAL_OP   reduce using rule 32 (binary_expression -> expression DIV_OP expression .)
    GREATER_EQUAL_OP reduce using rule 32 (binary_expression -> expression DIV_OP expression .)
    EQUAL_OP        reduce using rule 32 (binary_expression -> expression DIV_OP expression .)
    DIFFERENT_OP    reduce using rule 32 (binary_expression -> expression DIV_OP expression .)
    LOGICAL_OP_AND  reduce using rule 32 (binary_expression -> expression DIV_OP expression .)
    LOGICAL_OP_OR   reduce using rule 32 (binary_expression -> expression DIV_OP expression .)
    SEPARATION      reduce using rule 32 (binary_expression -> expression DIV_OP expression .)
    RPAREN          reduce using rule 32 (binary_expression -> expression DIV_OP expression .)

  ! PLUS_OP         [ shift and go to state 44 ]
  ! MINUS_OP        [ shift and go to state 45 ]
  ! MUL_OP          [ shift and go to state 46 ]
  ! DIV_OP          [ shift and go to state 47 ]
  ! LESS_OP         [ shift and go to state 48 ]
  ! GREATER_OP      [ shift and go to state 49 ]
  ! LESS_EQUAL_OP   [ shift and go to state 50 ]
  ! GREATER_EQUAL_OP [ shift and go to state 51 ]
  ! EQUAL_OP        [ shift and go to state 52 ]
  ! DIFFERENT_OP    [ shift and go to state 53 ]
  ! LOGICAL_OP_AND  [ shift and go to state 54 ]
  ! LOGICAL_OP_OR   [ shift and go to state 55 ]


state 83

    (33) binary_expression -> expression LESS_OP expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 33 (binary_expression -> expression LESS_OP expression .)
    LESS_OP         reduce using rule 33 (binary_expression -> expression LESS_OP expression .)
    GREATER_OP      reduce using rule 33 (binary_expression -> expression LESS_OP expression .)
    LESS_EQUAL_OP   reduce using rule 33 (binary_expression -> expression LESS_OP expression .)
    GREATER_EQUAL_OP reduce using rule 33 (binary_expression -> expression LESS_OP expression .)
    EQUAL_OP        reduce using rule 33 (binary_expression -> expression LESS_OP expression .)
    DIFFERENT_OP    reduce using rule 33 (binary_expression -> expression LESS_OP expression .)
    LOGICAL_OP_AND  reduce using rule 33 (binary_expression -> expression LESS_OP expression .)
    LOGICAL_OP_OR   reduce using rule 33 (binary_expression -> expression LESS_OP expression .)
    SEPARATION      reduce using rule 33 (binary_expression -> expression LESS_OP expression .)
    RPAREN          reduce using rule 33 (binary_expression -> expression LESS_OP expression .)
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47

  ! PLUS_OP         [ reduce using rule 33 (binary_expression -> expression LESS_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 33 (binary_expression -> expression LESS_OP expression .) ]
  ! MUL_OP          [ reduce using rule 33 (binary_expression -> expression LESS_OP expression .) ]
  ! DIV_OP          [ reduce using rule 33 (binary_expression -> expression LESS_OP expression .) ]
  ! LESS_OP         [ shift and go to state 48 ]
  ! GREATER_OP      [ shift and go to state 49 ]
  ! LESS_EQUAL_OP   [ shift and go to state 50 ]
  ! GREATER_EQUAL_OP [ shift and go to state 51 ]
  ! EQUAL_OP        [ shift and go to state 52 ]
  ! DIFFERENT_OP    [ shift and go to state 53 ]
  ! LOGICAL_OP_AND  [ shift and go to state 54 ]
  ! LOGICAL_OP_OR   [ shift and go to state 55 ]


state 84

    (34) binary_expression -> expression GREATER_OP expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 34 (binary_expression -> expression GREATER_OP expression .)
    LESS_OP         reduce using rule 34 (binary_expression -> expression GREATER_OP expression .)
    GREATER_OP      reduce using rule 34 (binary_expression -> expression GREATER_OP expression .)
    LESS_EQUAL_OP   reduce using rule 34 (binary_expression -> expression GREATER_OP expression .)
    GREATER_EQUAL_OP reduce using rule 34 (binary_expression -> expression GREATER_OP expression .)
    EQUAL_OP        reduce using rule 34 (binary_expression -> expression GREATER_OP expression .)
    DIFFERENT_OP    reduce using rule 34 (binary_expression -> expression GREATER_OP expression .)
    LOGICAL_OP_AND  reduce using rule 34 (binary_expression -> expression GREATER_OP expression .)
    LOGICAL_OP_OR   reduce using rule 34 (binary_expression -> expression GREATER_OP expression .)
    SEPARATION      reduce using rule 34 (binary_expression -> expression GREATER_OP expression .)
    RPAREN          reduce using rule 34 (binary_expression -> expression GREATER_OP expression .)
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47

  ! PLUS_OP         [ reduce using rule 34 (binary_expression -> expression GREATER_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 34 (binary_expression -> expression GREATER_OP expression .) ]
  ! MUL_OP          [ reduce using rule 34 (binary_expression -> expression GREATER_OP expression .) ]
  ! DIV_OP          [ reduce using rule 34 (binary_expression -> expression GREATER_OP expression .) ]
  ! LESS_OP         [ shift and go to state 48 ]
  ! GREATER_OP      [ shift and go to state 49 ]
  ! LESS_EQUAL_OP   [ shift and go to state 50 ]
  ! GREATER_EQUAL_OP [ shift and go to state 51 ]
  ! EQUAL_OP        [ shift and go to state 52 ]
  ! DIFFERENT_OP    [ shift and go to state 53 ]
  ! LOGICAL_OP_AND  [ shift and go to state 54 ]
  ! LOGICAL_OP_OR   [ shift and go to state 55 ]


state 85

    (35) binary_expression -> expression LESS_EQUAL_OP expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 35 (binary_expression -> expression LESS_EQUAL_OP expression .)
    LESS_OP         reduce using rule 35 (binary_expression -> expression LESS_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 35 (binary_expression -> expression LESS_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 35 (binary_expression -> expression LESS_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 35 (binary_expression -> expression LESS_EQUAL_OP expression .)
    EQUAL_OP        reduce using rule 35 (binary_expression -> expression LESS_EQUAL_OP expression .)
    DIFFERENT_OP    reduce using rule 35 (binary_expression -> expression LESS_EQUAL_OP expression .)
    LOGICAL_OP_AND  reduce using rule 35 (binary_expression -> expression LESS_EQUAL_OP expression .)
    LOGICAL_OP_OR   reduce using rule 35 (binary_expression -> expression LESS_EQUAL_OP expression .)
    SEPARATION      reduce using rule 35 (binary_expression -> expression LESS_EQUAL_OP expression .)
    RPAREN          reduce using rule 35 (binary_expression -> expression LESS_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47

  ! PLUS_OP         [ reduce using rule 35 (binary_expression -> expression LESS_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 35 (binary_expression -> expression LESS_EQUAL_OP expression .) ]
  ! MUL_OP          [ reduce using rule 35 (binary_expression -> expression LESS_EQUAL_OP expression .) ]
  ! DIV_OP          [ reduce using rule 35 (binary_expression -> expression LESS_EQUAL_OP expression .) ]
  ! LESS_OP         [ shift and go to state 48 ]
  ! GREATER_OP      [ shift and go to state 49 ]
  ! LESS_EQUAL_OP   [ shift and go to state 50 ]
  ! GREATER_EQUAL_OP [ shift and go to state 51 ]
  ! EQUAL_OP        [ shift and go to state 52 ]
  ! DIFFERENT_OP    [ shift and go to state 53 ]
  ! LOGICAL_OP_AND  [ shift and go to state 54 ]
  ! LOGICAL_OP_OR   [ shift and go to state 55 ]


state 86

    (36) binary_expression -> expression GREATER_EQUAL_OP expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 36 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    LESS_OP         reduce using rule 36 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_OP      reduce using rule 36 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 36 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 36 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    EQUAL_OP        reduce using rule 36 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    DIFFERENT_OP    reduce using rule 36 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    LOGICAL_OP_AND  reduce using rule 36 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    LOGICAL_OP_OR   reduce using rule 36 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    SEPARATION      reduce using rule 36 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    RPAREN          reduce using rule 36 (binary_expression -> expression GREATER_EQUAL_OP expression .)
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47

  ! PLUS_OP         [ reduce using rule 36 (binary_expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 36 (binary_expression -> expression GREATER_EQUAL_OP expression .) ]
  ! MUL_OP          [ reduce using rule 36 (binary_expression -> expression GREATER_EQUAL_OP expression .) ]
  ! DIV_OP          [ reduce using rule 36 (binary_expression -> expression GREATER_EQUAL_OP expression .) ]
  ! LESS_OP         [ shift and go to state 48 ]
  ! GREATER_OP      [ shift and go to state 49 ]
  ! LESS_EQUAL_OP   [ shift and go to state 50 ]
  ! GREATER_EQUAL_OP [ shift and go to state 51 ]
  ! EQUAL_OP        [ shift and go to state 52 ]
  ! DIFFERENT_OP    [ shift and go to state 53 ]
  ! LOGICAL_OP_AND  [ shift and go to state 54 ]
  ! LOGICAL_OP_OR   [ shift and go to state 55 ]


state 87

    (37) binary_expression -> expression EQUAL_OP expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 37 (binary_expression -> expression EQUAL_OP expression .)
    LESS_OP         reduce using rule 37 (binary_expression -> expression EQUAL_OP expression .)
    GREATER_OP      reduce using rule 37 (binary_expression -> expression EQUAL_OP expression .)
    LESS_EQUAL_OP   reduce using rule 37 (binary_expression -> expression EQUAL_OP expression .)
    GREATER_EQUAL_OP reduce using rule 37 (binary_expression -> expression EQUAL_OP expression .)
    EQUAL_OP        reduce using rule 37 (binary_expression -> expression EQUAL_OP expression .)
    DIFFERENT_OP    reduce using rule 37 (binary_expression -> expression EQUAL_OP expression .)
    LOGICAL_OP_AND  reduce using rule 37 (binary_expression -> expression EQUAL_OP expression .)
    LOGICAL_OP_OR   reduce using rule 37 (binary_expression -> expression EQUAL_OP expression .)
    SEPARATION      reduce using rule 37 (binary_expression -> expression EQUAL_OP expression .)
    RPAREN          reduce using rule 37 (binary_expression -> expression EQUAL_OP expression .)
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47

  ! PLUS_OP         [ reduce using rule 37 (binary_expression -> expression EQUAL_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 37 (binary_expression -> expression EQUAL_OP expression .) ]
  ! MUL_OP          [ reduce using rule 37 (binary_expression -> expression EQUAL_OP expression .) ]
  ! DIV_OP          [ reduce using rule 37 (binary_expression -> expression EQUAL_OP expression .) ]
  ! LESS_OP         [ shift and go to state 48 ]
  ! GREATER_OP      [ shift and go to state 49 ]
  ! LESS_EQUAL_OP   [ shift and go to state 50 ]
  ! GREATER_EQUAL_OP [ shift and go to state 51 ]
  ! EQUAL_OP        [ shift and go to state 52 ]
  ! DIFFERENT_OP    [ shift and go to state 53 ]
  ! LOGICAL_OP_AND  [ shift and go to state 54 ]
  ! LOGICAL_OP_OR   [ shift and go to state 55 ]


state 88

    (38) binary_expression -> expression DIFFERENT_OP expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 38 (binary_expression -> expression DIFFERENT_OP expression .)
    LESS_OP         reduce using rule 38 (binary_expression -> expression DIFFERENT_OP expression .)
    GREATER_OP      reduce using rule 38 (binary_expression -> expression DIFFERENT_OP expression .)
    LESS_EQUAL_OP   reduce using rule 38 (binary_expression -> expression DIFFERENT_OP expression .)
    GREATER_EQUAL_OP reduce using rule 38 (binary_expression -> expression DIFFERENT_OP expression .)
    EQUAL_OP        reduce using rule 38 (binary_expression -> expression DIFFERENT_OP expression .)
    DIFFERENT_OP    reduce using rule 38 (binary_expression -> expression DIFFERENT_OP expression .)
    LOGICAL_OP_AND  reduce using rule 38 (binary_expression -> expression DIFFERENT_OP expression .)
    LOGICAL_OP_OR   reduce using rule 38 (binary_expression -> expression DIFFERENT_OP expression .)
    SEPARATION      reduce using rule 38 (binary_expression -> expression DIFFERENT_OP expression .)
    RPAREN          reduce using rule 38 (binary_expression -> expression DIFFERENT_OP expression .)
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47

  ! PLUS_OP         [ reduce using rule 38 (binary_expression -> expression DIFFERENT_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 38 (binary_expression -> expression DIFFERENT_OP expression .) ]
  ! MUL_OP          [ reduce using rule 38 (binary_expression -> expression DIFFERENT_OP expression .) ]
  ! DIV_OP          [ reduce using rule 38 (binary_expression -> expression DIFFERENT_OP expression .) ]
  ! LESS_OP         [ shift and go to state 48 ]
  ! GREATER_OP      [ shift and go to state 49 ]
  ! LESS_EQUAL_OP   [ shift and go to state 50 ]
  ! GREATER_EQUAL_OP [ shift and go to state 51 ]
  ! EQUAL_OP        [ shift and go to state 52 ]
  ! DIFFERENT_OP    [ shift and go to state 53 ]
  ! LOGICAL_OP_AND  [ shift and go to state 54 ]
  ! LOGICAL_OP_OR   [ shift and go to state 55 ]


state 89

    (39) binary_expression -> expression LOGICAL_OP_AND expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 39 (binary_expression -> expression LOGICAL_OP_AND expression .)
    LOGICAL_OP_AND  reduce using rule 39 (binary_expression -> expression LOGICAL_OP_AND expression .)
    LOGICAL_OP_OR   reduce using rule 39 (binary_expression -> expression LOGICAL_OP_AND expression .)
    SEPARATION      reduce using rule 39 (binary_expression -> expression LOGICAL_OP_AND expression .)
    RPAREN          reduce using rule 39 (binary_expression -> expression LOGICAL_OP_AND expression .)
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47
    LESS_OP         shift and go to state 48
    GREATER_OP      shift and go to state 49
    LESS_EQUAL_OP   shift and go to state 50
    GREATER_EQUAL_OP shift and go to state 51
    EQUAL_OP        shift and go to state 52
    DIFFERENT_OP    shift and go to state 53

  ! PLUS_OP         [ reduce using rule 39 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! MINUS_OP        [ reduce using rule 39 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! MUL_OP          [ reduce using rule 39 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! DIV_OP          [ reduce using rule 39 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! LESS_OP         [ reduce using rule 39 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! GREATER_OP      [ reduce using rule 39 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 39 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 39 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! EQUAL_OP        [ reduce using rule 39 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! DIFFERENT_OP    [ reduce using rule 39 (binary_expression -> expression LOGICAL_OP_AND expression .) ]
  ! LOGICAL_OP_AND  [ shift and go to state 54 ]
  ! LOGICAL_OP_OR   [ shift and go to state 55 ]


state 90

    (40) binary_expression -> expression LOGICAL_OP_OR expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 40 (binary_expression -> expression LOGICAL_OP_OR expression .)
    LOGICAL_OP_OR   reduce using rule 40 (binary_expression -> expression LOGICAL_OP_OR expression .)
    SEPARATION      reduce using rule 40 (binary_expression -> expression LOGICAL_OP_OR expression .)
    RPAREN          reduce using rule 40 (binary_expression -> expression LOGICAL_OP_OR expression .)
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47
    LESS_OP         shift and go to state 48
    GREATER_OP      shift and go to state 49
    LESS_EQUAL_OP   shift and go to state 50
    GREATER_EQUAL_OP shift and go to state 51
    EQUAL_OP        shift and go to state 52
    DIFFERENT_OP    shift and go to state 53
    LOGICAL_OP_AND  shift and go to state 54

  ! PLUS_OP         [ reduce using rule 40 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! MINUS_OP        [ reduce using rule 40 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! MUL_OP          [ reduce using rule 40 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! DIV_OP          [ reduce using rule 40 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! LESS_OP         [ reduce using rule 40 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! GREATER_OP      [ reduce using rule 40 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! LESS_EQUAL_OP   [ reduce using rule 40 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! GREATER_EQUAL_OP [ reduce using rule 40 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! EQUAL_OP        [ reduce using rule 40 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! DIFFERENT_OP    [ reduce using rule 40 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! LOGICAL_OP_AND  [ reduce using rule 40 (binary_expression -> expression LOGICAL_OP_OR expression .) ]
  ! LOGICAL_OP_OR   [ shift and go to state 55 ]


state 91

    (51) assignment -> VARIABLE ASSIGNMENT_OP expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 51 (assignment -> VARIABLE ASSIGNMENT_OP expression .)
    SEPARATION      reduce using rule 51 (assignment -> VARIABLE ASSIGNMENT_OP expression .)
    RPAREN          reduce using rule 51 (assignment -> VARIABLE ASSIGNMENT_OP expression .)
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47
    LESS_OP         shift and go to state 48
    GREATER_OP      shift and go to state 49
    LESS_EQUAL_OP   shift and go to state 50
    GREATER_EQUAL_OP shift and go to state 51
    EQUAL_OP        shift and go to state 52
    DIFFERENT_OP    shift and go to state 53
    LOGICAL_OP_AND  shift and go to state 54
    LOGICAL_OP_OR   shift and go to state 55


state 92

    (21) function_call -> VARIABLE LPAREN argument_list . RPAREN
    (22) argument_list -> argument_list . SEPARATION expression

    RPAREN          shift and go to state 106
    SEPARATION      shift and go to state 107


state 93

    (23) argument_list -> expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    RPAREN          reduce using rule 23 (argument_list -> expression .)
    SEPARATION      reduce using rule 23 (argument_list -> expression .)
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47
    LESS_OP         shift and go to state 48
    GREATER_OP      shift and go to state 49
    LESS_EQUAL_OP   shift and go to state 50
    GREATER_EQUAL_OP shift and go to state 51
    EQUAL_OP        shift and go to state 52
    DIFFERENT_OP    shift and go to state 53
    LOGICAL_OP_AND  shift and go to state 54
    LOGICAL_OP_OR   shift and go to state 55


state 94

    (24) argument_list -> empty .

    RPAREN          reduce using rule 24 (argument_list -> empty .)
    SEPARATION      reduce using rule 24 (argument_list -> empty .)


state 95

    (52) declaration -> type VARIABLE ASSIGNMENT_OP . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 108
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 96

    (15) function_declaration -> type FUNCTION_DECLARATION LPAREN . parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (17) parameter_list -> . parameter_list SEPARATION parameter
    (18) parameter_list -> . parameter
    (19) parameter_list -> . empty
    (20) parameter -> . type VARIABLE
    (68) empty -> .
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    RPAREN          reduce using rule 68 (empty -> .)
    SEPARATION      reduce using rule 68 (empty -> .)
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    type                           shift and go to state 104
    parameter_list                 shift and go to state 109
    parameter                      shift and go to state 102
    empty                          shift and go to state 103

state 97

    (54) conditional -> CONDITIONAL1 LPAREN expression . RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> CONDITIONAL1 LPAREN expression . RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    RPAREN          shift and go to state 110
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47
    LESS_OP         shift and go to state 48
    GREATER_OP      shift and go to state 49
    LESS_EQUAL_OP   shift and go to state 50
    GREATER_EQUAL_OP shift and go to state 51
    EQUAL_OP        shift and go to state 52
    DIFFERENT_OP    shift and go to state 53
    LOGICAL_OP_AND  shift and go to state 54
    LOGICAL_OP_OR   shift and go to state 55


state 98

    (56) loop -> LOOP1 LPAREN expression . RPAREN STRUCTURE_BODY statement_list
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    RPAREN          shift and go to state 111
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47
    LESS_OP         shift and go to state 48
    GREATER_OP      shift and go to state 49
    LESS_EQUAL_OP   shift and go to state 50
    GREATER_EQUAL_OP shift and go to state 51
    EQUAL_OP        shift and go to state 52
    DIFFERENT_OP    shift and go to state 53
    LOGICAL_OP_AND  shift and go to state 54
    LOGICAL_OP_OR   shift and go to state 55


state 99

    (57) loop -> LOOP2 LPAREN assignment . SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list

    SEPARATION      shift and go to state 112


state 100

    (51) assignment -> VARIABLE . ASSIGNMENT_OP expression

    ASSIGNMENT_OP   shift and go to state 65


state 101

    (16) function_declaration -> FUNCTION_DECLARATION LPAREN parameter_list . RPAREN STRUCTURE_BODY statement_list END_LINE
    (17) parameter_list -> parameter_list . SEPARATION parameter

    RPAREN          shift and go to state 113
    SEPARATION      shift and go to state 114


state 102

    (18) parameter_list -> parameter .

    RPAREN          reduce using rule 18 (parameter_list -> parameter .)
    SEPARATION      reduce using rule 18 (parameter_list -> parameter .)


state 103

    (19) parameter_list -> empty .

    RPAREN          reduce using rule 19 (parameter_list -> empty .)
    SEPARATION      reduce using rule 19 (parameter_list -> empty .)


state 104

    (20) parameter -> type . VARIABLE

    VARIABLE        shift and go to state 115


state 105

    (25) print_statement -> PRINT_DECLARATION LPAREN expression . RPAREN
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    RPAREN          shift and go to state 116
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47
    LESS_OP         shift and go to state 48
    GREATER_OP      shift and go to state 49
    LESS_EQUAL_OP   shift and go to state 50
    GREATER_EQUAL_OP shift and go to state 51
    EQUAL_OP        shift and go to state 52
    DIFFERENT_OP    shift and go to state 53
    LOGICAL_OP_AND  shift and go to state 54
    LOGICAL_OP_OR   shift and go to state 55


state 106

    (21) function_call -> VARIABLE LPAREN argument_list RPAREN .

    END_LINE        reduce using rule 21 (function_call -> VARIABLE LPAREN argument_list RPAREN .)
    PLUS_OP         reduce using rule 21 (function_call -> VARIABLE LPAREN argument_list RPAREN .)
    MINUS_OP        reduce using rule 21 (function_call -> VARIABLE LPAREN argument_list RPAREN .)
    MUL_OP          reduce using rule 21 (function_call -> VARIABLE LPAREN argument_list RPAREN .)
    DIV_OP          reduce using rule 21 (function_call -> VARIABLE LPAREN argument_list RPAREN .)
    LESS_OP         reduce using rule 21 (function_call -> VARIABLE LPAREN argument_list RPAREN .)
    GREATER_OP      reduce using rule 21 (function_call -> VARIABLE LPAREN argument_list RPAREN .)
    LESS_EQUAL_OP   reduce using rule 21 (function_call -> VARIABLE LPAREN argument_list RPAREN .)
    GREATER_EQUAL_OP reduce using rule 21 (function_call -> VARIABLE LPAREN argument_list RPAREN .)
    EQUAL_OP        reduce using rule 21 (function_call -> VARIABLE LPAREN argument_list RPAREN .)
    DIFFERENT_OP    reduce using rule 21 (function_call -> VARIABLE LPAREN argument_list RPAREN .)
    LOGICAL_OP_AND  reduce using rule 21 (function_call -> VARIABLE LPAREN argument_list RPAREN .)
    LOGICAL_OP_OR   reduce using rule 21 (function_call -> VARIABLE LPAREN argument_list RPAREN .)
    SEPARATION      reduce using rule 21 (function_call -> VARIABLE LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 21 (function_call -> VARIABLE LPAREN argument_list RPAREN .)


state 107

    (22) argument_list -> argument_list SEPARATION . expression
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 117
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 108

    (52) declaration -> type VARIABLE ASSIGNMENT_OP expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    END_LINE        reduce using rule 52 (declaration -> type VARIABLE ASSIGNMENT_OP expression .)
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47
    LESS_OP         shift and go to state 48
    GREATER_OP      shift and go to state 49
    LESS_EQUAL_OP   shift and go to state 50
    GREATER_EQUAL_OP shift and go to state 51
    EQUAL_OP        shift and go to state 52
    DIFFERENT_OP    shift and go to state 53
    LOGICAL_OP_AND  shift and go to state 54
    LOGICAL_OP_OR   shift and go to state 55


state 109

    (15) function_declaration -> type FUNCTION_DECLARATION LPAREN parameter_list . RPAREN STRUCTURE_BODY statement_list END_LINE
    (17) parameter_list -> parameter_list . SEPARATION parameter

    RPAREN          shift and go to state 118
    SEPARATION      shift and go to state 114


state 110

    (54) conditional -> CONDITIONAL1 LPAREN expression RPAREN . STRUCTURE_BODY statement_list
    (55) conditional -> CONDITIONAL1 LPAREN expression RPAREN . STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list

    STRUCTURE_BODY  shift and go to state 119


state 111

    (56) loop -> LOOP1 LPAREN expression RPAREN . STRUCTURE_BODY statement_list

    STRUCTURE_BODY  shift and go to state 120


state 112

    (57) loop -> LOOP2 LPAREN assignment SEPARATION . expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN

    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    VARIABLE        shift and go to state 73
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35

    expression                     shift and go to state 121
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    function_call                  shift and go to state 74

state 113

    (16) function_declaration -> FUNCTION_DECLARATION LPAREN parameter_list RPAREN . STRUCTURE_BODY statement_list END_LINE

    STRUCTURE_BODY  shift and go to state 122


state 114

    (17) parameter_list -> parameter_list SEPARATION . parameter
    (20) parameter -> . type VARIABLE
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    parameter                      shift and go to state 123
    type                           shift and go to state 104

state 115

    (20) parameter -> type VARIABLE .

    RPAREN          reduce using rule 20 (parameter -> type VARIABLE .)
    SEPARATION      reduce using rule 20 (parameter -> type VARIABLE .)


state 116

    (25) print_statement -> PRINT_DECLARATION LPAREN expression RPAREN .

    END_LINE        reduce using rule 25 (print_statement -> PRINT_DECLARATION LPAREN expression RPAREN .)


state 117

    (22) argument_list -> argument_list SEPARATION expression .
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    RPAREN          reduce using rule 22 (argument_list -> argument_list SEPARATION expression .)
    SEPARATION      reduce using rule 22 (argument_list -> argument_list SEPARATION expression .)
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47
    LESS_OP         shift and go to state 48
    GREATER_OP      shift and go to state 49
    LESS_EQUAL_OP   shift and go to state 50
    GREATER_EQUAL_OP shift and go to state 51
    EQUAL_OP        shift and go to state 52
    DIFFERENT_OP    shift and go to state 53
    LOGICAL_OP_AND  shift and go to state 54
    LOGICAL_OP_OR   shift and go to state 55


state 118

    (15) function_declaration -> type FUNCTION_DECLARATION LPAREN parameter_list RPAREN . STRUCTURE_BODY statement_list END_LINE

    STRUCTURE_BODY  shift and go to state 124


state 119

    (54) conditional -> CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY . statement_list
    (55) conditional -> CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY . statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . conditional END_LINE
    (8) statement -> . loop END_LINE
    (9) statement -> . return_statement END_LINE
    (10) statement -> . break_statement END_LINE
    (11) statement -> . function_declaration END_LINE
    (12) statement -> . function_call END_LINE
    (13) statement -> . print_statement END_LINE
    (14) statement -> . comment
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (52) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (53) declaration -> . type VARIABLE
    (54) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (56) loop -> . LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (57) loop -> . LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (60) break_statement -> . BREAK
    (15) function_declaration -> . type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (16) function_declaration -> . FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN
    (25) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (61) comment -> . COMMENT
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    VARIABLE        shift and go to state 18
    CONDITIONAL1    shift and go to state 20
    LOOP1           shift and go to state 21
    LOOP2           shift and go to state 22
    RETURN          shift and go to state 23
    BREAK           shift and go to state 24
    FUNCTION_DECLARATION shift and go to state 25
    PRINT_DECLARATION shift and go to state 26
    COMMENT         shift and go to state 27
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 4
    statement_list                 shift and go to state 125
    statement                      shift and go to state 3
    assignment                     shift and go to state 5
    declaration                    shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    function_declaration           shift and go to state 11
    function_call                  shift and go to state 12
    print_statement                shift and go to state 13
    comment                        shift and go to state 14
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    type                           shift and go to state 19

state 120

    (56) loop -> LOOP1 LPAREN expression RPAREN STRUCTURE_BODY . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . conditional END_LINE
    (8) statement -> . loop END_LINE
    (9) statement -> . return_statement END_LINE
    (10) statement -> . break_statement END_LINE
    (11) statement -> . function_declaration END_LINE
    (12) statement -> . function_call END_LINE
    (13) statement -> . print_statement END_LINE
    (14) statement -> . comment
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (52) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (53) declaration -> . type VARIABLE
    (54) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (56) loop -> . LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (57) loop -> . LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (60) break_statement -> . BREAK
    (15) function_declaration -> . type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (16) function_declaration -> . FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN
    (25) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (61) comment -> . COMMENT
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    VARIABLE        shift and go to state 18
    CONDITIONAL1    shift and go to state 20
    LOOP1           shift and go to state 21
    LOOP2           shift and go to state 22
    RETURN          shift and go to state 23
    BREAK           shift and go to state 24
    FUNCTION_DECLARATION shift and go to state 25
    PRINT_DECLARATION shift and go to state 26
    COMMENT         shift and go to state 27
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 4
    statement_list                 shift and go to state 126
    statement                      shift and go to state 3
    assignment                     shift and go to state 5
    declaration                    shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    function_declaration           shift and go to state 11
    function_call                  shift and go to state 12
    print_statement                shift and go to state 13
    comment                        shift and go to state 14
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    type                           shift and go to state 19

state 121

    (57) loop -> LOOP2 LPAREN assignment SEPARATION expression . SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (29) binary_expression -> expression . PLUS_OP expression
    (30) binary_expression -> expression . MINUS_OP expression
    (31) binary_expression -> expression . MUL_OP expression
    (32) binary_expression -> expression . DIV_OP expression
    (33) binary_expression -> expression . LESS_OP expression
    (34) binary_expression -> expression . GREATER_OP expression
    (35) binary_expression -> expression . LESS_EQUAL_OP expression
    (36) binary_expression -> expression . GREATER_EQUAL_OP expression
    (37) binary_expression -> expression . EQUAL_OP expression
    (38) binary_expression -> expression . DIFFERENT_OP expression
    (39) binary_expression -> expression . LOGICAL_OP_AND expression
    (40) binary_expression -> expression . LOGICAL_OP_OR expression

    SEPARATION      shift and go to state 127
    PLUS_OP         shift and go to state 44
    MINUS_OP        shift and go to state 45
    MUL_OP          shift and go to state 46
    DIV_OP          shift and go to state 47
    LESS_OP         shift and go to state 48
    GREATER_OP      shift and go to state 49
    LESS_EQUAL_OP   shift and go to state 50
    GREATER_EQUAL_OP shift and go to state 51
    EQUAL_OP        shift and go to state 52
    DIFFERENT_OP    shift and go to state 53
    LOGICAL_OP_AND  shift and go to state 54
    LOGICAL_OP_OR   shift and go to state 55


state 122

    (16) function_declaration -> FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY . statement_list END_LINE
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . conditional END_LINE
    (8) statement -> . loop END_LINE
    (9) statement -> . return_statement END_LINE
    (10) statement -> . break_statement END_LINE
    (11) statement -> . function_declaration END_LINE
    (12) statement -> . function_call END_LINE
    (13) statement -> . print_statement END_LINE
    (14) statement -> . comment
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (52) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (53) declaration -> . type VARIABLE
    (54) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (56) loop -> . LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (57) loop -> . LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (60) break_statement -> . BREAK
    (15) function_declaration -> . type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (16) function_declaration -> . FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN
    (25) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (61) comment -> . COMMENT
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    VARIABLE        shift and go to state 18
    CONDITIONAL1    shift and go to state 20
    LOOP1           shift and go to state 21
    LOOP2           shift and go to state 22
    RETURN          shift and go to state 23
    BREAK           shift and go to state 24
    FUNCTION_DECLARATION shift and go to state 25
    PRINT_DECLARATION shift and go to state 26
    COMMENT         shift and go to state 27
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    statement_list                 shift and go to state 128
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    assignment                     shift and go to state 5
    declaration                    shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    function_declaration           shift and go to state 11
    function_call                  shift and go to state 12
    print_statement                shift and go to state 13
    comment                        shift and go to state 14
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    type                           shift and go to state 19

state 123

    (17) parameter_list -> parameter_list SEPARATION parameter .

    RPAREN          reduce using rule 17 (parameter_list -> parameter_list SEPARATION parameter .)
    SEPARATION      reduce using rule 17 (parameter_list -> parameter_list SEPARATION parameter .)


state 124

    (15) function_declaration -> type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY . statement_list END_LINE
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . conditional END_LINE
    (8) statement -> . loop END_LINE
    (9) statement -> . return_statement END_LINE
    (10) statement -> . break_statement END_LINE
    (11) statement -> . function_declaration END_LINE
    (12) statement -> . function_call END_LINE
    (13) statement -> . print_statement END_LINE
    (14) statement -> . comment
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (52) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (53) declaration -> . type VARIABLE
    (54) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (56) loop -> . LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (57) loop -> . LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (60) break_statement -> . BREAK
    (15) function_declaration -> . type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (16) function_declaration -> . FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN
    (25) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (61) comment -> . COMMENT
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    VARIABLE        shift and go to state 18
    CONDITIONAL1    shift and go to state 20
    LOOP1           shift and go to state 21
    LOOP2           shift and go to state 22
    RETURN          shift and go to state 23
    BREAK           shift and go to state 24
    FUNCTION_DECLARATION shift and go to state 25
    PRINT_DECLARATION shift and go to state 26
    COMMENT         shift and go to state 27
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    type                           shift and go to state 19
    statement_list                 shift and go to state 129
    statement                      shift and go to state 3
    expression                     shift and go to state 4
    assignment                     shift and go to state 5
    declaration                    shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    function_declaration           shift and go to state 11
    function_call                  shift and go to state 12
    print_statement                shift and go to state 13
    comment                        shift and go to state 14
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17

state 125

    (54) conditional -> CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list .
    (55) conditional -> CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list . CONDITIONAL2 STRUCTURE_BODY statement_list
    (2) statement_list -> statement_list . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . conditional END_LINE
    (8) statement -> . loop END_LINE
    (9) statement -> . return_statement END_LINE
    (10) statement -> . break_statement END_LINE
    (11) statement -> . function_declaration END_LINE
    (12) statement -> . function_call END_LINE
    (13) statement -> . print_statement END_LINE
    (14) statement -> . comment
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (52) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (53) declaration -> . type VARIABLE
    (54) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (56) loop -> . LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (57) loop -> . LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (60) break_statement -> . BREAK
    (15) function_declaration -> . type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (16) function_declaration -> . FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN
    (25) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (61) comment -> . COMMENT
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    END_LINE        reduce using rule 54 (conditional -> CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list .)
    CONDITIONAL2    shift and go to state 130
    VARIABLE        shift and go to state 18
    CONDITIONAL1    shift and go to state 20
    LOOP1           shift and go to state 21
    LOOP2           shift and go to state 22
    RETURN          shift and go to state 23
    BREAK           shift and go to state 24
    FUNCTION_DECLARATION shift and go to state 25
    PRINT_DECLARATION shift and go to state 26
    COMMENT         shift and go to state 27
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 4
    statement                      shift and go to state 42
    assignment                     shift and go to state 5
    declaration                    shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    function_declaration           shift and go to state 11
    function_call                  shift and go to state 12
    print_statement                shift and go to state 13
    comment                        shift and go to state 14
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    type                           shift and go to state 19

state 126

    (56) loop -> LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . conditional END_LINE
    (8) statement -> . loop END_LINE
    (9) statement -> . return_statement END_LINE
    (10) statement -> . break_statement END_LINE
    (11) statement -> . function_declaration END_LINE
    (12) statement -> . function_call END_LINE
    (13) statement -> . print_statement END_LINE
    (14) statement -> . comment
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (52) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (53) declaration -> . type VARIABLE
    (54) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (56) loop -> . LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (57) loop -> . LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (60) break_statement -> . BREAK
    (15) function_declaration -> . type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (16) function_declaration -> . FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN
    (25) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (61) comment -> . COMMENT
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    END_LINE        reduce using rule 56 (loop -> LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list .)
    VARIABLE        shift and go to state 18
    CONDITIONAL1    shift and go to state 20
    LOOP1           shift and go to state 21
    LOOP2           shift and go to state 22
    RETURN          shift and go to state 23
    BREAK           shift and go to state 24
    FUNCTION_DECLARATION shift and go to state 25
    PRINT_DECLARATION shift and go to state 26
    COMMENT         shift and go to state 27
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 4
    statement                      shift and go to state 42
    assignment                     shift and go to state 5
    declaration                    shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    function_declaration           shift and go to state 11
    function_call                  shift and go to state 12
    print_statement                shift and go to state 13
    comment                        shift and go to state 14
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    type                           shift and go to state 19

state 127

    (57) loop -> LOOP2 LPAREN assignment SEPARATION expression SEPARATION . assignment RPAREN STRUCTURE_BODY statement_list
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression

    VARIABLE        shift and go to state 100

    assignment                     shift and go to state 131

state 128

    (16) function_declaration -> FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list . END_LINE
    (2) statement_list -> statement_list . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . conditional END_LINE
    (8) statement -> . loop END_LINE
    (9) statement -> . return_statement END_LINE
    (10) statement -> . break_statement END_LINE
    (11) statement -> . function_declaration END_LINE
    (12) statement -> . function_call END_LINE
    (13) statement -> . print_statement END_LINE
    (14) statement -> . comment
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (52) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (53) declaration -> . type VARIABLE
    (54) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (56) loop -> . LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (57) loop -> . LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (60) break_statement -> . BREAK
    (15) function_declaration -> . type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (16) function_declaration -> . FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN
    (25) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (61) comment -> . COMMENT
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    END_LINE        shift and go to state 132
    VARIABLE        shift and go to state 18
    CONDITIONAL1    shift and go to state 20
    LOOP1           shift and go to state 21
    LOOP2           shift and go to state 22
    RETURN          shift and go to state 23
    BREAK           shift and go to state 24
    FUNCTION_DECLARATION shift and go to state 25
    PRINT_DECLARATION shift and go to state 26
    COMMENT         shift and go to state 27
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    statement                      shift and go to state 42
    expression                     shift and go to state 4
    assignment                     shift and go to state 5
    declaration                    shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    function_declaration           shift and go to state 11
    function_call                  shift and go to state 12
    print_statement                shift and go to state 13
    comment                        shift and go to state 14
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    type                           shift and go to state 19

state 129

    (15) function_declaration -> type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list . END_LINE
    (2) statement_list -> statement_list . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . conditional END_LINE
    (8) statement -> . loop END_LINE
    (9) statement -> . return_statement END_LINE
    (10) statement -> . break_statement END_LINE
    (11) statement -> . function_declaration END_LINE
    (12) statement -> . function_call END_LINE
    (13) statement -> . print_statement END_LINE
    (14) statement -> . comment
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (52) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (53) declaration -> . type VARIABLE
    (54) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (56) loop -> . LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (57) loop -> . LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (60) break_statement -> . BREAK
    (15) function_declaration -> . type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (16) function_declaration -> . FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN
    (25) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (61) comment -> . COMMENT
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    END_LINE        shift and go to state 133
    VARIABLE        shift and go to state 18
    CONDITIONAL1    shift and go to state 20
    LOOP1           shift and go to state 21
    LOOP2           shift and go to state 22
    RETURN          shift and go to state 23
    BREAK           shift and go to state 24
    FUNCTION_DECLARATION shift and go to state 25
    PRINT_DECLARATION shift and go to state 26
    COMMENT         shift and go to state 27
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    type                           shift and go to state 19
    statement                      shift and go to state 42
    expression                     shift and go to state 4
    assignment                     shift and go to state 5
    declaration                    shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    function_declaration           shift and go to state 11
    function_call                  shift and go to state 12
    print_statement                shift and go to state 13
    comment                        shift and go to state 14
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17

state 130

    (55) conditional -> CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 . STRUCTURE_BODY statement_list

    STRUCTURE_BODY  shift and go to state 134


state 131

    (57) loop -> LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment . RPAREN STRUCTURE_BODY statement_list

    RPAREN          shift and go to state 135


state 132

    (16) function_declaration -> FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE .

    END_LINE        reduce using rule 16 (function_declaration -> FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE .)


state 133

    (15) function_declaration -> type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE .

    END_LINE        reduce using rule 15 (function_declaration -> type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE .)


state 134

    (55) conditional -> CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . conditional END_LINE
    (8) statement -> . loop END_LINE
    (9) statement -> . return_statement END_LINE
    (10) statement -> . break_statement END_LINE
    (11) statement -> . function_declaration END_LINE
    (12) statement -> . function_call END_LINE
    (13) statement -> . print_statement END_LINE
    (14) statement -> . comment
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (52) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (53) declaration -> . type VARIABLE
    (54) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (56) loop -> . LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (57) loop -> . LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (60) break_statement -> . BREAK
    (15) function_declaration -> . type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (16) function_declaration -> . FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN
    (25) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (61) comment -> . COMMENT
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    VARIABLE        shift and go to state 18
    CONDITIONAL1    shift and go to state 20
    LOOP1           shift and go to state 21
    LOOP2           shift and go to state 22
    RETURN          shift and go to state 23
    BREAK           shift and go to state 24
    FUNCTION_DECLARATION shift and go to state 25
    PRINT_DECLARATION shift and go to state 26
    COMMENT         shift and go to state 27
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 4
    statement_list                 shift and go to state 136
    statement                      shift and go to state 3
    assignment                     shift and go to state 5
    declaration                    shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    function_declaration           shift and go to state 11
    function_call                  shift and go to state 12
    print_statement                shift and go to state 13
    comment                        shift and go to state 14
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    type                           shift and go to state 19

state 135

    (57) loop -> LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN . STRUCTURE_BODY statement_list

    STRUCTURE_BODY  shift and go to state 137


state 136

    (55) conditional -> CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . conditional END_LINE
    (8) statement -> . loop END_LINE
    (9) statement -> . return_statement END_LINE
    (10) statement -> . break_statement END_LINE
    (11) statement -> . function_declaration END_LINE
    (12) statement -> . function_call END_LINE
    (13) statement -> . print_statement END_LINE
    (14) statement -> . comment
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (52) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (53) declaration -> . type VARIABLE
    (54) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (56) loop -> . LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (57) loop -> . LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (60) break_statement -> . BREAK
    (15) function_declaration -> . type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (16) function_declaration -> . FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN
    (25) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (61) comment -> . COMMENT
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    END_LINE        reduce using rule 55 (conditional -> CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list .)
    VARIABLE        shift and go to state 18
    CONDITIONAL1    shift and go to state 20
    LOOP1           shift and go to state 21
    LOOP2           shift and go to state 22
    RETURN          shift and go to state 23
    BREAK           shift and go to state 24
    FUNCTION_DECLARATION shift and go to state 25
    PRINT_DECLARATION shift and go to state 26
    COMMENT         shift and go to state 27
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    expression                     shift and go to state 4
    statement                      shift and go to state 42
    assignment                     shift and go to state 5
    declaration                    shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    function_declaration           shift and go to state 11
    function_call                  shift and go to state 12
    print_statement                shift and go to state 13
    comment                        shift and go to state 14
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    type                           shift and go to state 19

state 137

    (57) loop -> LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . conditional END_LINE
    (8) statement -> . loop END_LINE
    (9) statement -> . return_statement END_LINE
    (10) statement -> . break_statement END_LINE
    (11) statement -> . function_declaration END_LINE
    (12) statement -> . function_call END_LINE
    (13) statement -> . print_statement END_LINE
    (14) statement -> . comment
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (52) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (53) declaration -> . type VARIABLE
    (54) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (56) loop -> . LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (57) loop -> . LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (60) break_statement -> . BREAK
    (15) function_declaration -> . type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (16) function_declaration -> . FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN
    (25) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (61) comment -> . COMMENT
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    VARIABLE        shift and go to state 18
    CONDITIONAL1    shift and go to state 20
    LOOP1           shift and go to state 21
    LOOP2           shift and go to state 22
    RETURN          shift and go to state 23
    BREAK           shift and go to state 24
    FUNCTION_DECLARATION shift and go to state 25
    PRINT_DECLARATION shift and go to state 26
    COMMENT         shift and go to state 27
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    assignment                     shift and go to state 5
    expression                     shift and go to state 4
    statement_list                 shift and go to state 138
    statement                      shift and go to state 3
    declaration                    shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    function_declaration           shift and go to state 11
    function_call                  shift and go to state 12
    print_statement                shift and go to state 13
    comment                        shift and go to state 14
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    type                           shift and go to state 19

state 138

    (57) loop -> LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . expression END_LINE
    (5) statement -> . assignment END_LINE
    (6) statement -> . declaration END_LINE
    (7) statement -> . conditional END_LINE
    (8) statement -> . loop END_LINE
    (9) statement -> . return_statement END_LINE
    (10) statement -> . break_statement END_LINE
    (11) statement -> . function_declaration END_LINE
    (12) statement -> . function_call END_LINE
    (13) statement -> . print_statement END_LINE
    (14) statement -> . comment
    (26) expression -> . binary_expression
    (27) expression -> . unitary_expression
    (28) expression -> . primary_expression
    (51) assignment -> . VARIABLE ASSIGNMENT_OP expression
    (52) declaration -> . type VARIABLE ASSIGNMENT_OP expression
    (53) declaration -> . type VARIABLE
    (54) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (55) conditional -> . CONDITIONAL1 LPAREN expression RPAREN STRUCTURE_BODY statement_list CONDITIONAL2 STRUCTURE_BODY statement_list
    (56) loop -> . LOOP1 LPAREN expression RPAREN STRUCTURE_BODY statement_list
    (57) loop -> . LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list
    (58) return_statement -> . RETURN expression
    (59) return_statement -> . RETURN
    (60) break_statement -> . BREAK
    (15) function_declaration -> . type FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (16) function_declaration -> . FUNCTION_DECLARATION LPAREN parameter_list RPAREN STRUCTURE_BODY statement_list END_LINE
    (21) function_call -> . VARIABLE LPAREN argument_list RPAREN
    (25) print_statement -> . PRINT_DECLARATION LPAREN expression RPAREN
    (61) comment -> . COMMENT
    (29) binary_expression -> . expression PLUS_OP expression
    (30) binary_expression -> . expression MINUS_OP expression
    (31) binary_expression -> . expression MUL_OP expression
    (32) binary_expression -> . expression DIV_OP expression
    (33) binary_expression -> . expression LESS_OP expression
    (34) binary_expression -> . expression GREATER_OP expression
    (35) binary_expression -> . expression LESS_EQUAL_OP expression
    (36) binary_expression -> . expression GREATER_EQUAL_OP expression
    (37) binary_expression -> . expression EQUAL_OP expression
    (38) binary_expression -> . expression DIFFERENT_OP expression
    (39) binary_expression -> . expression LOGICAL_OP_AND expression
    (40) binary_expression -> . expression LOGICAL_OP_OR expression
    (41) unitary_expression -> . MINUS_OP expression
    (42) unitary_expression -> . LOGICAL_OP_NOT expression
    (43) primary_expression -> . VARIABLE
    (44) primary_expression -> . NUMBER_INTEGER
    (45) primary_expression -> . NUMBER_FLOAT
    (46) primary_expression -> . TRUE
    (47) primary_expression -> . FALSE
    (48) primary_expression -> . TEXT_CHAR
    (49) primary_expression -> . TEXT_STRING
    (50) primary_expression -> . function_call
    (62) type -> . TYPE_INTEGER
    (63) type -> . TYPE_FLOAT
    (64) type -> . TYPE_BOOLEAN
    (65) type -> . TYPE_CHAR
    (66) type -> . TYPE_STRING
    (67) type -> . NULL

    END_LINE        reduce using rule 57 (loop -> LOOP2 LPAREN assignment SEPARATION expression SEPARATION assignment RPAREN STRUCTURE_BODY statement_list .)
    VARIABLE        shift and go to state 18
    CONDITIONAL1    shift and go to state 20
    LOOP1           shift and go to state 21
    LOOP2           shift and go to state 22
    RETURN          shift and go to state 23
    BREAK           shift and go to state 24
    FUNCTION_DECLARATION shift and go to state 25
    PRINT_DECLARATION shift and go to state 26
    COMMENT         shift and go to state 27
    MINUS_OP        shift and go to state 28
    LOGICAL_OP_NOT  shift and go to state 29
    NUMBER_INTEGER  shift and go to state 30
    NUMBER_FLOAT    shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    TEXT_CHAR       shift and go to state 34
    TEXT_STRING     shift and go to state 35
    TYPE_INTEGER    shift and go to state 36
    TYPE_FLOAT      shift and go to state 37
    TYPE_BOOLEAN    shift and go to state 38
    TYPE_CHAR       shift and go to state 39
    TYPE_STRING     shift and go to state 40
    NULL            shift and go to state 41

    assignment                     shift and go to state 5
    expression                     shift and go to state 4
    statement                      shift and go to state 42
    declaration                    shift and go to state 6
    conditional                    shift and go to state 7
    loop                           shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    function_declaration           shift and go to state 11
    function_call                  shift and go to state 12
    print_statement                shift and go to state 13
    comment                        shift and go to state 14
    binary_expression              shift and go to state 15
    unitary_expression             shift and go to state 16
    primary_expression             shift and go to state 17
    type                           shift and go to state 19
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for END_LINE in state 12 resolved as shift
