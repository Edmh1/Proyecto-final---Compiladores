
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLOGICAL_OP_ORleftLOGICAL_OP_ANDrightLOGICAL_OP_NOTleftLESS_OPLESS_EQUAL_OPGREATER_OPGREATER_EQUAL_OPEQUAL_OPDIFFERENT_OPleftPLUS_OPMINUS_OPleftMUL_OPDIV_OPnonassocLPARENRPARENASSIGNMENT_OP BREAK COMMENT CONDITIONAL1 CONDITIONAL2 DIFFERENT_OP DIV_OP END_LINE EQUAL_OP FALSE FUNCTION_DECLARATION GREATER_EQUAL_OP GREATER_OP LESS_EQUAL_OP LESS_OP LOGICAL_OP_AND LOGICAL_OP_NOT LOGICAL_OP_OR LOOP LPAREN MINUS_OP MUL_OP NULL NUMBER_FLOAT NUMBER_INTEGER PLUS_OP PRINT_DECLARATION RETURN RPAREN SEPARATION STRUCTURE_BODY TEXT_CHAR TEXT_STRING TRUE TYPE_BOOLEAN TYPE_CHAR TYPE_FLOAT TYPE_INTEGER TYPE_STRING UNTIL VARIABLEprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : expression END_LINE\n                 | assignment END_LINE\n                 | declaration END_LINE\n                 | print_statement END_LINE\n                 | comment\n                 | error\n                 assignment : VARIABLE ASSIGNMENT_OP expressiondeclaration : type VARIABLE ASSIGNMENT_OP expression\n                   | type VARIABLEexpression : binary_expression\n                  | unitary_expression\n                  | primary_expression\n                  binary_expression : expression PLUS_OP expression\n                         | expression MINUS_OP expression\n                         | expression MUL_OP expression\n                         | expression DIV_OP expression\n                         | expression LESS_OP expression\n                         | expression GREATER_OP expression\n                         | expression LESS_EQUAL_OP expression\n                         | expression GREATER_EQUAL_OP expression\n                         | expression EQUAL_OP expression\n                         | expression DIFFERENT_OP expression\n                         | expression LOGICAL_OP_AND expression\n                         | expression LOGICAL_OP_OR expressionunitary_expression : MINUS_OP expression\n                          | LOGICAL_OP_NOT expressionprimary_expression : VARIABLE\n                          | NUMBER_INTEGER\n                          | NUMBER_FLOAT\n                          | TRUE\n                          | FALSE\n                          | NULL\n                          | TEXT_CHAR\n                          | TEXT_STRING\n                          print_statement : PRINT_DECLARATION LPAREN expression RPARENcomment : COMMENTempty : type : TYPE_INTEGER\n            | TYPE_FLOAT\n            | TYPE_BOOLEAN\n            | TYPE_CHAR\n            | TYPE_STRING'
    
_lr_action_items = {'error':([0,2,3,8,9,16,31,32,45,46,47,],[9,9,-3,-8,-9,-39,-2,-4,-5,-6,-7,]),'VARIABLE':([0,2,3,8,9,14,16,17,18,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,67,],[13,13,-3,-8,-9,49,-39,52,52,-41,-42,-43,-44,-45,-2,-4,52,52,52,52,52,52,52,52,52,52,52,52,-5,-6,-7,52,52,52,]),'PRINT_DECLARATION':([0,2,3,8,9,16,31,32,45,46,47,],[15,15,-3,-8,-9,-39,-2,-4,-5,-6,-7,]),'COMMENT':([0,2,3,8,9,16,31,32,45,46,47,],[16,16,-3,-8,-9,-39,-2,-4,-5,-6,-7,]),'MINUS_OP':([0,2,3,4,8,9,10,11,12,13,16,17,18,19,20,21,22,23,24,25,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[17,17,-3,34,-8,-9,-13,-14,-15,-30,-39,17,17,-31,-32,-33,-34,-35,-36,-37,-2,-4,17,17,17,17,17,17,17,17,17,17,17,17,-5,-6,-7,17,17,-28,-30,34,-16,-17,-18,-19,34,34,34,34,34,34,34,34,34,17,34,34,]),'LOGICAL_OP_NOT':([0,2,3,8,9,16,17,18,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,67,],[18,18,-3,-8,-9,-39,18,18,-2,-4,18,18,18,18,18,18,18,18,18,18,18,18,-5,-6,-7,18,18,18,]),'NUMBER_INTEGER':([0,2,3,8,9,16,17,18,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,67,],[19,19,-3,-8,-9,-39,19,19,-2,-4,19,19,19,19,19,19,19,19,19,19,19,19,-5,-6,-7,19,19,19,]),'NUMBER_FLOAT':([0,2,3,8,9,16,17,18,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,67,],[20,20,-3,-8,-9,-39,20,20,-2,-4,20,20,20,20,20,20,20,20,20,20,20,20,-5,-6,-7,20,20,20,]),'TRUE':([0,2,3,8,9,16,17,18,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,67,],[21,21,-3,-8,-9,-39,21,21,-2,-4,21,21,21,21,21,21,21,21,21,21,21,21,-5,-6,-7,21,21,21,]),'FALSE':([0,2,3,8,9,16,17,18,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,67,],[22,22,-3,-8,-9,-39,22,22,-2,-4,22,22,22,22,22,22,22,22,22,22,22,22,-5,-6,-7,22,22,22,]),'NULL':([0,2,3,8,9,16,17,18,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,67,],[23,23,-3,-8,-9,-39,23,23,-2,-4,23,23,23,23,23,23,23,23,23,23,23,23,-5,-6,-7,23,23,23,]),'TEXT_CHAR':([0,2,3,8,9,16,17,18,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,67,],[24,24,-3,-8,-9,-39,24,24,-2,-4,24,24,24,24,24,24,24,24,24,24,24,24,-5,-6,-7,24,24,24,]),'TEXT_STRING':([0,2,3,8,9,16,17,18,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,67,],[25,25,-3,-8,-9,-39,25,25,-2,-4,25,25,25,25,25,25,25,25,25,25,25,25,-5,-6,-7,25,25,25,]),'TYPE_INTEGER':([0,2,3,8,9,16,31,32,45,46,47,],[26,26,-3,-8,-9,-39,-2,-4,-5,-6,-7,]),'TYPE_FLOAT':([0,2,3,8,9,16,31,32,45,46,47,],[27,27,-3,-8,-9,-39,-2,-4,-5,-6,-7,]),'TYPE_BOOLEAN':([0,2,3,8,9,16,31,32,45,46,47,],[28,28,-3,-8,-9,-39,-2,-4,-5,-6,-7,]),'TYPE_CHAR':([0,2,3,8,9,16,31,32,45,46,47,],[29,29,-3,-8,-9,-39,-2,-4,-5,-6,-7,]),'TYPE_STRING':([0,2,3,8,9,16,31,32,45,46,47,],[30,30,-3,-8,-9,-39,-2,-4,-5,-6,-7,]),'$end':([1,2,3,8,9,16,31,32,45,46,47,],[0,-1,-3,-8,-9,-39,-2,-4,-5,-6,-7,]),'END_LINE':([4,5,6,7,10,11,12,13,19,20,21,22,23,24,25,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,],[32,45,46,47,-13,-14,-15,-30,-31,-32,-33,-34,-35,-36,-37,-12,-28,-30,-29,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-10,-11,-38,]),'PLUS_OP':([4,10,11,12,13,19,20,21,22,23,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,],[33,-13,-14,-15,-30,-31,-32,-33,-34,-35,-36,-37,-28,-30,33,-16,-17,-18,-19,33,33,33,33,33,33,33,33,33,33,33,]),'MUL_OP':([4,10,11,12,13,19,20,21,22,23,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,],[35,-13,-14,-15,-30,-31,-32,-33,-34,-35,-36,-37,35,-30,35,35,35,-18,-19,35,35,35,35,35,35,35,35,35,35,35,]),'DIV_OP':([4,10,11,12,13,19,20,21,22,23,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,],[36,-13,-14,-15,-30,-31,-32,-33,-34,-35,-36,-37,36,-30,36,36,36,-18,-19,36,36,36,36,36,36,36,36,36,36,36,]),'LESS_OP':([4,10,11,12,13,19,20,21,22,23,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,],[37,-13,-14,-15,-30,-31,-32,-33,-34,-35,-36,-37,-28,-30,37,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,37,37,37,37,37,]),'GREATER_OP':([4,10,11,12,13,19,20,21,22,23,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,],[38,-13,-14,-15,-30,-31,-32,-33,-34,-35,-36,-37,-28,-30,38,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,38,38,38,38,38,]),'LESS_EQUAL_OP':([4,10,11,12,13,19,20,21,22,23,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,],[39,-13,-14,-15,-30,-31,-32,-33,-34,-35,-36,-37,-28,-30,39,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,39,39,39,39,39,]),'GREATER_EQUAL_OP':([4,10,11,12,13,19,20,21,22,23,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,],[40,-13,-14,-15,-30,-31,-32,-33,-34,-35,-36,-37,-28,-30,40,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,40,40,40,40,40,]),'EQUAL_OP':([4,10,11,12,13,19,20,21,22,23,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,],[41,-13,-14,-15,-30,-31,-32,-33,-34,-35,-36,-37,-28,-30,41,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,41,41,41,41,41,]),'DIFFERENT_OP':([4,10,11,12,13,19,20,21,22,23,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,],[42,-13,-14,-15,-30,-31,-32,-33,-34,-35,-36,-37,-28,-30,42,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,42,42,42,42,42,]),'LOGICAL_OP_AND':([4,10,11,12,13,19,20,21,22,23,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,],[43,-13,-14,-15,-30,-31,-32,-33,-34,-35,-36,-37,-28,-30,-29,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,43,43,43,43,]),'LOGICAL_OP_OR':([4,10,11,12,13,19,20,21,22,23,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,],[44,-13,-14,-15,-30,-31,-32,-33,-34,-35,-36,-37,-28,-30,-29,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,44,44,44,]),'RPAREN':([10,11,12,19,20,21,22,23,24,25,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,],[-13,-14,-15,-31,-32,-33,-34,-35,-36,-37,-28,-30,-29,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,70,]),'ASSIGNMENT_OP':([13,49,],[48,67,]),'LPAREN':([15,],[50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,31,]),'expression':([0,2,17,18,33,34,35,36,37,38,39,40,41,42,43,44,48,50,67,],[4,4,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,]),'assignment':([0,2,],[5,5,]),'declaration':([0,2,],[6,6,]),'print_statement':([0,2,],[7,7,]),'comment':([0,2,],[8,8,]),'binary_expression':([0,2,17,18,33,34,35,36,37,38,39,40,41,42,43,44,48,50,67,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'unitary_expression':([0,2,17,18,33,34,35,36,37,38,39,40,41,42,43,44,48,50,67,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'primary_expression':([0,2,17,18,33,34,35,36,37,38,39,40,41,42,43,44,48,50,67,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'type':([0,2,],[14,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',23),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement -> expression END_LINE','statement',2,'p_statement','parser.py',35),
  ('statement -> assignment END_LINE','statement',2,'p_statement','parser.py',36),
  ('statement -> declaration END_LINE','statement',2,'p_statement','parser.py',37),
  ('statement -> print_statement END_LINE','statement',2,'p_statement','parser.py',38),
  ('statement -> comment','statement',1,'p_statement','parser.py',39),
  ('statement -> error','statement',1,'p_statement','parser.py',40),
  ('assignment -> VARIABLE ASSIGNMENT_OP expression','assignment',3,'p_assignment','parser.py',45),
  ('declaration -> type VARIABLE ASSIGNMENT_OP expression','declaration',4,'p_declaration','parser.py',50),
  ('declaration -> type VARIABLE','declaration',2,'p_declaration','parser.py',51),
  ('expression -> binary_expression','expression',1,'p_expression','parser.py',79),
  ('expression -> unitary_expression','expression',1,'p_expression','parser.py',80),
  ('expression -> primary_expression','expression',1,'p_expression','parser.py',81),
  ('binary_expression -> expression PLUS_OP expression','binary_expression',3,'p_binary_expression','parser.py',86),
  ('binary_expression -> expression MINUS_OP expression','binary_expression',3,'p_binary_expression','parser.py',87),
  ('binary_expression -> expression MUL_OP expression','binary_expression',3,'p_binary_expression','parser.py',88),
  ('binary_expression -> expression DIV_OP expression','binary_expression',3,'p_binary_expression','parser.py',89),
  ('binary_expression -> expression LESS_OP expression','binary_expression',3,'p_binary_expression','parser.py',90),
  ('binary_expression -> expression GREATER_OP expression','binary_expression',3,'p_binary_expression','parser.py',91),
  ('binary_expression -> expression LESS_EQUAL_OP expression','binary_expression',3,'p_binary_expression','parser.py',92),
  ('binary_expression -> expression GREATER_EQUAL_OP expression','binary_expression',3,'p_binary_expression','parser.py',93),
  ('binary_expression -> expression EQUAL_OP expression','binary_expression',3,'p_binary_expression','parser.py',94),
  ('binary_expression -> expression DIFFERENT_OP expression','binary_expression',3,'p_binary_expression','parser.py',95),
  ('binary_expression -> expression LOGICAL_OP_AND expression','binary_expression',3,'p_binary_expression','parser.py',96),
  ('binary_expression -> expression LOGICAL_OP_OR expression','binary_expression',3,'p_binary_expression','parser.py',97),
  ('unitary_expression -> MINUS_OP expression','unitary_expression',2,'p_unitary_expression','parser.py',135),
  ('unitary_expression -> LOGICAL_OP_NOT expression','unitary_expression',2,'p_unitary_expression','parser.py',136),
  ('primary_expression -> VARIABLE','primary_expression',1,'p_primary_expression','parser.py',144),
  ('primary_expression -> NUMBER_INTEGER','primary_expression',1,'p_primary_expression','parser.py',145),
  ('primary_expression -> NUMBER_FLOAT','primary_expression',1,'p_primary_expression','parser.py',146),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','parser.py',147),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','parser.py',148),
  ('primary_expression -> NULL','primary_expression',1,'p_primary_expression','parser.py',149),
  ('primary_expression -> TEXT_CHAR','primary_expression',1,'p_primary_expression','parser.py',150),
  ('primary_expression -> TEXT_STRING','primary_expression',1,'p_primary_expression','parser.py',151),
  ('print_statement -> PRINT_DECLARATION LPAREN expression RPAREN','print_statement',4,'p_print_statement','parser.py',163),
  ('comment -> COMMENT','comment',1,'p_comment','parser.py',168),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',172),
  ('type -> TYPE_INTEGER','type',1,'p_type','parser.py',176),
  ('type -> TYPE_FLOAT','type',1,'p_type','parser.py',177),
  ('type -> TYPE_BOOLEAN','type',1,'p_type','parser.py',178),
  ('type -> TYPE_CHAR','type',1,'p_type','parser.py',179),
  ('type -> TYPE_STRING','type',1,'p_type','parser.py',180),
]
